<?xml version="1.0" encoding="UTF-8"?>
<defun name="template">

    <in name="base_filename" type="string" place="base_filename"/>
    <in name="library_name" type="string" place="library_name"/>
    <in name="input" type="string" place="input"/>
    <out name="output_MI" type="string" place="final_MI"/>
    <out name="output_web" type="string" place="final_web"/>
    <out name="output_reducedIBPs" type="string" place="final_reducedIBPs"/>

    <net>
        <place name="base_filename" type="string">
        </place>
        <place name="library_name" type="string">
        </place>
        <place name="input" type="string">
        </place>
        <place name="labeledgraph" type="string">
        </place>
        <place name="control_11" type="control">
            <token><value>[]</value></token>
        </place>
        <place name="MI_11" type="string">
        </place>
        <place name="web_11" type="string">
        </place>
        <place name="reducedIBPs_11" type="string">
        </place>
        <place name="control_21" type="control">
            <token><value>[]</value></token>
        </place>
        <place name="MI_21" type="string">
        </place>
        <place name="web_21" type="string">
        </place>
        <place name="reducedIBPs_21" type="string">
        </place>
        <place name="control_22" type="control">
            <token><value>[]</value></token>
        </place>
        <place name="MI_22" type="string">
        </place>
        <place name="web_22" type="string">
        </place>
        <place name="reducedIBPs_22" type="string">
        </place>
        <place name="control_23" type="control">
            <token><value>[]</value></token>
        </place>
        <place name="MI_23" type="string">
        </place>
        <place name="web_23" type="string">
        </place>
        <place name="reducedIBPs_23" type="string">
        </place>
        <place name="control_31" type="control">
            <token><value>[]</value></token>
        </place>
        <place name="MI_31" type="string">
        </place>
        <place name="web_31" type="string">
        </place>
        <place name="reducedIBPs_31" type="string">
        </place>
        <place name="control_32" type="control">
            <token><value>[]</value></token>
        </place>
        <place name="MI_32" type="string">
        </place>
        <place name="web_32" type="string">
        </place>
        <place name="reducedIBPs_32" type="string">
        </place>
        <place name="control_33" type="control">
            <token><value>[]</value></token>
        </place>
        <place name="MI_33" type="string">
        </place>
        <place name="web_33" type="string">
        </place>
        <place name="reducedIBPs_33" type="string">
        </place>
        <place name="control_end" type="control">
            <token><value>[]</value></token>
        </place>
        <place name="final_MI" type="string">
        </place>
        <place name="final_web" type="string">
        </place>
        <place name="final_reducedIBPs" type="string">
        </place>
        <transition name="T_11">
            <defun>
               <require key="worker" mandatory="true"/>
                <out name="labeledgraph" type="string"/>
                <out name="MI_11" type="string"/>
                <out name="web_11" type="string"/>
                <out name="reducedIBPs_11" type="string"/>
                <in name="library_name" type="string"/>
                <in name="base_filename" type="string"/>
                <in name="input" type="string"/>
                <in name="control_11" type="control"/>
                <module name="singular_template" require_function_unloads_without_rest="false" function="f_T_11(control_11, library_name, base_filename, input, labeledgraph, MI_11, web_11, reducedIBPs_11)">
                    <cinclude href="interface/template_interface.hpp"/>
                    <cinclude href="util-generic/dynamic_linking.hpp"/>
                    <code><![CDATA[
                        std::cout<<"Starting T_11..."<<std::endl;
                        std::string input_gpi = RESOLVE_INTERFACE_FUNCTION(singular_getReducedIBPSystemInitial_gpi)(input, library_name, base_filename);
                         labeledgraph = RESOLVE_INTERFACE_FUNCTION(singular_getLabeledGraph_gpi)(input_gpi, library_name, base_filename);
                       // std::cout << "labeledgraph: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(labeledgraph, library_name) << std::endl;
                         web_11 = RESOLVE_INTERFACE_FUNCTION(singular_getWeb_gpi)(input_gpi , library_name, base_filename);
                       //  std::cout << "web_11: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(web_11, library_name) << std::endl;
                         reducedIBPs_11 = RESOLVE_INTERFACE_FUNCTION(singular_getReducedIBPs_gpi)(input_gpi, library_name, base_filename);
                       // std::cout << "reducedIBPs_11: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(reducedIBPs_11, library_name) << std::endl;
                        MI_11 = RESOLVE_INTERFACE_FUNCTION(singular_getMI_gpi)(input_gpi, library_name, base_filename);
                            //std::cout << "MI_11: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(MI_11, library_name) << std::endl;
                        std::cout<<"finished T_11"<<std::endl;
                    ]]></code>
                </module>
            </defun>
            <connect-in port="control_11" place="control_11"/>
            <connect-out port="MI_11" place="MI_11"/>
            <connect-out port="web_11" place="web_11"/>
            <connect-out port="reducedIBPs_11" place="reducedIBPs_11"/>
            <connect-read port="base_filename" place="base_filename"/>
            <connect-read port="library_name" place="library_name"/>
            <connect-read port="input" place="input"/>
            <connect-out port="labeledgraph" place="labeledgraph"/>
        </transition>

        <transition name="T_21">
            <defun>
                <require key="worker" mandatory="true"/>
                <in name="MI_11" type="string"/>
                <in name="web_11" type="string"/>
                <in name="reducedIBPs_11" type="string"/>
                <out name="MI_21" type="string"/>
                <out name="web_21" type="string"/>
                <out name="reducedIBPs_21" type="string"/>
                <in name="base_filename" type="string"/>
                <in name="library_name" type="string"/>
                <in name="labeledgraph" type="string"/>
                <in name="control_21" type="control"/>
                <module name="singular_template" require_function_unloads_without_rest="false" function="f_T_21(control_21, MI_11, web_11, reducedIBPs_11, base_filename, library_name, labeledgraph, MI_21, web_21, reducedIBPs_21)">
                    <cinclude href="interface/template_interface.hpp"/>
                    <cinclude href="util-generic/dynamic_linking.hpp"/>
                    <code><![CDATA[
                        std::cout<<"Starting T_21..."<<std::endl;
                        int j = 2;
                        int k = 1;
                        std::string data_21 = RESOLVE_INTERFACE_FUNCTION(singular_getReducedIBPSystemCompute_gpi)(labeledgraph, web_11, reducedIBPs_11, MI_11, j, k,library_name, base_filename);
                        //std::cout << "data_21: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(data_21, library_name) << std::endl;
                        web_21 = RESOLVE_INTERFACE_FUNCTION(singular_getWeb_gpi)(data_21, library_name, base_filename);
                       //  std::cout << "web_21: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(web_21, library_name) << std::endl;
                        reducedIBPs_21 = RESOLVE_INTERFACE_FUNCTION(singular_getReducedIBPs_gpi)(data_21, library_name, base_filename);
                       // std::cout << "reducedIBPs_21: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(reducedIBPs_21, library_name) << std::endl; 
                        MI_21 = RESOLVE_INTERFACE_FUNCTION(singular_getMI_gpi)(data_21, library_name, base_filename);
                        //std::cout << "MI_21: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(MI_21, library_name) << std::endl;
                        std::cout<<"finished T_21"<<std::endl;
                    ]]></code>
                </module>
            </defun>
            <connect-in port="control_21" place="control_21"/>
            <connect-read port="MI_11" place="MI_11"/>
            <connect-read port="web_11" place="web_11"/>
            <connect-read port="reducedIBPs_11" place="reducedIBPs_11"/>
            <connect-read port="base_filename" place="base_filename"/>
            <connect-read port="library_name" place="library_name"/>
            <connect-read port="labeledgraph" place="labeledgraph"/>
            <connect-out port="MI_21" place="MI_21"/>
            <connect-out port="web_21" place="web_21"/>
            <connect-out port="reducedIBPs_21" place="reducedIBPs_21"/>
        </transition>

        <transition name="T_22">
            <defun>
                <require key="worker" mandatory="true"/>
                <in name="MI_11" type="string"/>
                <in name="web_11" type="string"/>
                <in name="reducedIBPs_11" type="string"/>
                <out name="MI_22" type="string"/>
                <out name="web_22" type="string"/>
                <out name="reducedIBPs_22" type="string"/>
                <in name="base_filename" type="string"/>
                <in name="library_name" type="string"/>
                <in name="labeledgraph" type="string"/>
                <in name="control_22" type="control"/>
                <module name="singular_template" require_function_unloads_without_rest="false" function="f_T_22(control_22, MI_11, web_11, reducedIBPs_11, base_filename, library_name, labeledgraph, MI_22, web_22, reducedIBPs_22)">
                    <cinclude href="interface/template_interface.hpp"/>
                    <cinclude href="util-generic/dynamic_linking.hpp"/>
                    <code><![CDATA[
                        std::cout<<"Starting T_22..."<<std::endl;
                        int j = 2, k = 2;
                        std::string data_22 = RESOLVE_INTERFACE_FUNCTION(singular_getReducedIBPSystemCompute_gpi)(labeledgraph, web_11, reducedIBPs_11, MI_11, j, k,library_name, base_filename);
                        //std::cout << "data_22: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(data_22, library_name) << std::endl;   
                        web_22 = RESOLVE_INTERFACE_FUNCTION(singular_getWeb_gpi)(data_22, library_name, base_filename);
                       //  std::cout << "web_22: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(web_22, library_name) << std::endl;
                        reducedIBPs_22 = RESOLVE_INTERFACE_FUNCTION(singular_getReducedIBPs_gpi)(data_22, library_name, base_filename);
                       // std::cout << "reducedIBPs_22: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(reducedIBPs_22, library_name) << std::endl; 
                        MI_22 = RESOLVE_INTERFACE_FUNCTION(singular_getMI_gpi)(data_22, library_name, base_filename);
                        //std::cout << "MI_22: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(MI_22, library_name) << std::endl;       
                        std::cout<<"finished T_22"<<std::endl;
                    ]]></code>
                </module>
            </defun>
            <connect-in port="control_22" place="control_22"/>
            <connect-read port="MI_11" place="MI_11"/>
            <connect-read port="web_11" place="web_11"/>
            <connect-read port="reducedIBPs_11" place="reducedIBPs_11"/>
            <connect-read port="base_filename" place="base_filename"/>
            <connect-read port="library_name" place="library_name"/>
            <connect-read port="labeledgraph" place="labeledgraph"/>
            <connect-out port="MI_22" place="MI_22"/>
            <connect-out port="web_22" place="web_22"/>
            <connect-out port="reducedIBPs_22" place="reducedIBPs_22"/>
        </transition>
        <transition name="T_23">
            <defun>
                <require key="worker" mandatory="true"/>
                <in name="MI_11" type="string"/>
                <in name="web_11" type="string"/>
                <in name="reducedIBPs_11" type="string"/>
                <out name="MI_23" type="string"/>
                <out name="web_23" type="string"/>
                <out name="reducedIBPs_23" type="string"/>
            
                <in name="base_filename" type="string"/>
                <in name="library_name" type="string"/>
                <in name="labeledgraph" type="string"/>
                <in name="control_23" type="control"/>
                <module name="singular_template" require_function_unloads_without_rest="false" function="f_T_23(control_23, MI_11, web_11, reducedIBPs_11, base_filename, library_name, labeledgraph, MI_23, web_23, reducedIBPs_23)">
                    <cinclude href="interface/template_interface.hpp"/>
                    <cinclude href="util-generic/dynamic_linking.hpp"/>
                    <code><![CDATA[
                        std::cout<<"Starting T_23..."<<std::endl;
                        int j = 2, k = 3;
                        std::string data_23 = RESOLVE_INTERFACE_FUNCTION(singular_getReducedIBPSystemCompute_gpi)(labeledgraph, web_11, reducedIBPs_11, MI_11, j, k,library_name, base_filename);
                        //std::cout << "data_23: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(data_23, library_name) << std::endl;
                        web_23 = RESOLVE_INTERFACE_FUNCTION(singular_getWeb_gpi)(data_23, library_name, base_filename);
                       //  std::cout << "web_23: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(web_23, library_name) << std::endl;
                        reducedIBPs_23 = RESOLVE_INTERFACE_FUNCTION(singular_getReducedIBPs_gpi)(data_23, library_name, base_filename);
                       // std::cout << "reducedIBPs_23: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(reducedIBPs_23, library_name) << std::endl;
                        MI_23 = RESOLVE_INTERFACE_FUNCTION(singular_getMI_gpi)(data_23, library_name, base_filename);
                        //std::cout << "MI_23: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(MI_23, library_name) << std::endl;
                        std::cout<<"finished T_23"<<std::endl;
                    ]]></code>
                </module>
            </defun>
            <connect-in port="control_23" place="control_23"/>
            <connect-read port="MI_11" place="MI_11"/>
            <connect-read port="web_11" place="web_11"/>
            <connect-read port="reducedIBPs_11" place="reducedIBPs_11"/>
            <connect-read port="base_filename" place="base_filename"/>
            <connect-read port="library_name" place="library_name"/>
            <connect-read port="labeledgraph" place="labeledgraph"/>
            <connect-out port="MI_23" place="MI_23"/>
            <connect-out port="web_23" place="web_23"/>
            <connect-out port="reducedIBPs_23" place="reducedIBPs_23"/>
        </transition>
        <transition name="T_31">
        <defun>
            <require key="worker" mandatory="true"/>
            <in name="MI_21" type="string"/>
            <in name="web_21" type="string"/>
            <in name="reducedIBPs_21" type="string"/>
            <in name="MI_23" type="string"/>
            <in name="web_23" type="string"/>
            <in name="reducedIBPs_23" type="string"/>
            <out name="MI_31" type="string"/>
            <out name="web_31" type="string"/>
            <out name="reducedIBPs_31" type="string"/>
            <in name="base_filename" type="string"/>
            <in name="library_name" type="string"/>
            <in name="labeledgraph" type="string"/>
            <in name="control_31" type="control"/>
            <module name="singular_template" require_function_unloads_without_rest="false" function="f_T_31(control_31, base_filename, library_name, labeledgraph, MI_21, web_21, reducedIBPs_21, MI_23, web_23, reducedIBPs_23, MI_31, web_31, reducedIBPs_31)">
                <cinclude href="interface/template_interface.hpp"/>
                <cinclude href="util-generic/dynamic_linking.hpp"/>
                <code><![CDATA[
                    std::cout << "Starting T_31..." << std::endl;
    
                    std::string MI = MI_21;
                    std::string web = web_21;
                    std::string reducedIBPs = reducedIBPs_21;
                    std::cout << "MI in T_31: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(MI, library_name) << std::endl;
                    std::cout << "web in T_31: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(web, library_name) << std::endl;
                    std::cout << "reducedIBPs in T_31: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(reducedIBPs, library_name) << std::endl;
    
                    std::vector<std::pair<int, int>> jk_pairs = {{2, 1}, {2, 3}};
                    std::map<std::pair<int, int>, std::tuple<std::string, std::string, std::string>> jk_inputs;
                    jk_inputs[{2, 1}] = {MI_21, web_21, reducedIBPs_21};
                    jk_inputs[{2, 3}] = {MI_23, web_23, reducedIBPs_23};
    
                    for (const auto& pair : jk_pairs) {
                        int j = pair.first;
                        int k = pair.second;
    
                        auto [MI_jk, web_jk, reducedIBPs_jk] = jk_inputs[{j, k}];
                        std::cout << "Merging for j=" << j << ", k=" << k << std::endl;
                        std::cout << "MI_jk: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(MI_jk, library_name) << std::endl;
    

                        std::cout << "Starting mergeRedIBPs_gpi..." << std::endl;
                        reducedIBPs = RESOLVE_INTERFACE_FUNCTION(singular_mergeRedIBPs_gpi)(reducedIBPs, reducedIBPs_jk, library_name, base_filename);
                        std::cout << "Merged reducedIBPs: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(reducedIBPs, library_name) << std::endl;
              
                        std::cout << "Starting mergeMI_gpi..." << std::endl;
                        MI = RESOLVE_INTERFACE_FUNCTION(singular_mergeMI_gpi)(MI, MI_jk, library_name, base_filename);
                        std::cout << "Merged MI: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(MI, library_name) << std::endl;
    
                        std::cout << "Starting merge_web_gpi..." << std::endl;
                        web = RESOLVE_INTERFACE_FUNCTION(singular_merge_web_gpi)(web, web_jk, library_name, base_filename);
                        std::cout << "Merged web: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(web, library_name) << std::endl;
    
                             }
    
                    int j = 3, k = 1;
                    std::cout << "Computing j=3, k=1..." << std::endl;
                    std::string data_31 = RESOLVE_INTERFACE_FUNCTION(singular_getReducedIBPSystemCompute_gpi)(
                        labeledgraph, web, reducedIBPs, MI, j, k, library_name, base_filename
                    );
                    std::cout << "data_31: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(data_31, library_name) << std::endl;
    
                    web_31 = RESOLVE_INTERFACE_FUNCTION(singular_getWeb_gpi)(data_31, library_name, base_filename);
                    //std::cout << "web_31: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(web_31, library_name) << std::endl;
                    reducedIBPs_31 = RESOLVE_INTERFACE_FUNCTION(singular_getReducedIBPs_gpi)(data_31, library_name, base_filename);
                    //std::cout << "reducedIBPs_31: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(reducedIBPs_31, library_name) << std::endl;
                    MI_31 = RESOLVE_INTERFACE_FUNCTION(singular_getMI_gpi)(data_31, library_name, base_filename);
                    //std::cout << "MI_31: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(MI_31, library_name) << std::endl;
                    std::cout<<"finished T_31"<<std::endl;
                ]]></code>
            </module>
        </defun>
        <connect-in port="control_31" place="control_31"/>
        <connect-read port="MI_21" place="MI_21"/>
        <connect-read port="web_21" place="web_21"/>
        <connect-read port="reducedIBPs_21" place="reducedIBPs_21"/>
        <connect-read port="MI_23" place="MI_23"/>
        <connect-read port="web_23" place="web_23"/>
        <connect-read port="reducedIBPs_23" place="reducedIBPs_23"/>
        <connect-read port="base_filename" place="base_filename"/>
        <connect-read port="library_name" place="library_name"/>
        <connect-read port="labeledgraph" place="labeledgraph"/>
        <connect-out port="MI_31" place="MI_31"/>
        <connect-out port="web_31" place="web_31"/>
        <connect-out port="reducedIBPs_31" place="reducedIBPs_31"/>
    </transition>
        <transition name="T_32">
            <defun>
                <require key="worker" mandatory="true"/>
                <in name="MI_21" type="string"/>
                <in name="web_21" type="string"/>
                <in name="reducedIBPs_21" type="string"/>
                <in name="MI_22" type="string"/>
                <in name="web_22" type="string"/>
                <in name="reducedIBPs_22" type="string"/>
                <out name="MI_32" type="string"/>
                <out name="web_32" type="string"/>
                <out name="reducedIBPs_32" type="string"/>
                <in name="base_filename" type="string"/>
                <in name="library_name" type="string"/>
                <in name="labeledgraph" type="string"/>
                <in name="control_32" type="control"/>
                <module name="singular_template" require_function_unloads_without_rest="false" function="f_T_32(control_32, base_filename, library_name, labeledgraph, MI_21, web_21, reducedIBPs_21, MI_22, web_22, reducedIBPs_22, MI_32, web_32, reducedIBPs_32)">
                    <cinclude href="interface/template_interface.hpp"/>
                    <cinclude href="util-generic/dynamic_linking.hpp"/>
                    <code><![CDATA[
                        std::cout << "Starting T_32..." << std::endl;
    
                    std::string MI = MI_21;
                    std::string web = web_21;
                    std::string reducedIBPs = reducedIBPs_21;
                    std::cout << "MI in T_32: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(MI, library_name) << std::endl;
                    std::cout << "web in T_32: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(web, library_name) << std::endl;
                    std::cout << "reducedIBPs in T_32: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(reducedIBPs, library_name) << std::endl;
    
                    std::vector<std::pair<int, int>> jk_pairs = {{2, 1}, {2, 2}};
                    std::map<std::pair<int, int>, std::tuple<std::string, std::string, std::string>> jk_inputs;
                    jk_inputs[{2, 1}] = {MI_21, web_21, reducedIBPs_21};
                    jk_inputs[{2, 2}] = {MI_22, web_22, reducedIBPs_22};
    
                    for (const auto& pair : jk_pairs) {
                        int j = pair.first;
                        int k = pair.second;
    
                        auto [MI_jk, web_jk, reducedIBPs_jk] = jk_inputs[{j, k}];
                        std::cout << "Merging for j=" << j << ", k=" << k << std::endl;
                        std::cout << "MI_jk: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(MI_jk, library_name) << std::endl;
    

                        std::cout << "Starting mergeRedIBPs_gpi..." << std::endl;
                        reducedIBPs = RESOLVE_INTERFACE_FUNCTION(singular_mergeRedIBPs_gpi)(reducedIBPs, reducedIBPs_jk, library_name, base_filename);
                        std::cout << "Merged reducedIBPs: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(reducedIBPs, library_name) << std::endl;
              
                        std::cout << "Starting mergeMI_gpi..." << std::endl;
                        MI = RESOLVE_INTERFACE_FUNCTION(singular_mergeMI_gpi)(MI, MI_jk, library_name, base_filename);
                        std::cout << "Merged MI: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(MI, library_name) << std::endl;
    
                        std::cout << "Starting merge_web_gpi..." << std::endl;
                        web = RESOLVE_INTERFACE_FUNCTION(singular_merge_web_gpi)(web, web_jk, library_name, base_filename);
                        std::cout << "Merged web: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(web, library_name) << std::endl;
    
                             }
    
                    int j = 3, k = 2;
                    std::cout << "Computing j=3, k=2..." << std::endl;
                    std::string data_32 = RESOLVE_INTERFACE_FUNCTION(singular_getReducedIBPSystemCompute_gpi)(
                        labeledgraph, web, reducedIBPs, MI, j, k, library_name, base_filename
                    );
                    std::cout << "data_32: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(data_32, library_name) << std::endl;
    
                    web_32 = RESOLVE_INTERFACE_FUNCTION(singular_getWeb_gpi)(data_32, library_name, base_filename);
                    //std::cout << "web_32: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(web_32, library_name) << std::endl;
                    reducedIBPs_32 = RESOLVE_INTERFACE_FUNCTION(singular_getReducedIBPs_gpi)(data_32, library_name, base_filename);
                    //std::cout << "reducedIBPs_32: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(reducedIBPs_32, library_name) << std::endl;
                    MI_32 = RESOLVE_INTERFACE_FUNCTION(singular_getMI_gpi)(data_32, library_name, base_filename);
                    //std::cout << "MI_32: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(MI_32, library_name) << std::endl;
                    std::cout<<"finished T_32"<<std::endl;
                    ]]></code>
                </module>
            </defun>
            <connect-in port="control_32" place="control_32"/>
            <connect-read port="MI_21" place="MI_21"/>
            <connect-read port="web_21" place="web_21"/>
            <connect-read port="reducedIBPs_21" place="reducedIBPs_21"/>
            <connect-read port="MI_22" place="MI_22"/>
            <connect-read port="web_22" place="web_22"/>
            <connect-read port="reducedIBPs_22" place="reducedIBPs_22"/>
            <connect-read port="base_filename" place="base_filename"/>
            <connect-read port="library_name" place="library_name"/>
            <connect-read port="labeledgraph" place="labeledgraph"/>
            <connect-out port="MI_32" place="MI_32"/>
            <connect-out port="web_32" place="web_32"/>
            <connect-out port="reducedIBPs_32" place="reducedIBPs_32"/>
        </transition>
        
        <transition name="T_33">
            <defun>
                <require key="worker" mandatory="true"/>
                <in name="MI_22" type="string"/>
                <in name="web_22" type="string"/>
                <in name="reducedIBPs_22" type="string"/>
                <in name="MI_23" type="string"/>
                <in name="web_23" type="string"/>
                <in name="reducedIBPs_23" type="string"/>
                <out name="MI_33" type="string"/>
                <out name="web_33" type="string"/>
                <out name="reducedIBPs_33" type="string"/>
                <in name="base_filename" type="string"/>
                <in name="library_name" type="string"/>
                <in name="labeledgraph" type="string"/>
                <in name="control_33" type="control"/>
                <module name="singular_template" require_function_unloads_without_rest="false" function="f_T_33(control_33, base_filename, library_name, labeledgraph, MI_22, web_22, reducedIBPs_22, MI_23, web_23, reducedIBPs_23, MI_33, web_33, reducedIBPs_33)">
                    <cinclude href="interface/template_interface.hpp"/>
                    <cinclude href="util-generic/dynamic_linking.hpp"/>
                    <code><![CDATA[
                    std::cout << "Starting T_33..." << std::endl;
    
                    std::string MI = MI_22;
                    std::string web = web_22;
                    std::string reducedIBPs = reducedIBPs_22;
                    std::cout << "MI in T_33: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(MI, library_name) << std::endl;
                    std::cout << "web in T_33: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(web, library_name) << std::endl;
                    std::cout << "reducedIBPs in T_33: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(reducedIBPs, library_name) << std::endl;

                    std::vector<std::pair<int, int>> jk_pairs = {{2, 2}, {2, 3}};   
                    std::map<std::pair<int, int>, std::tuple<std::string, std::string, std::string>> jk_inputs;
                    jk_inputs[{2, 2}] = {MI_22, web_22, reducedIBPs_22};
                    jk_inputs[{2, 3}] = {MI_23, web_23, reducedIBPs_23};

                    for (const auto& pair : jk_pairs) {
                        int j = pair.first; 
                        int k = pair.second;

                        auto [MI_jk, web_jk, reducedIBPs_jk] = jk_inputs[{j, k}];
                        std::cout << "Merging for j=" << j << ", k=" << k << std::endl;
                        std::cout << "MI_jk: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(MI_jk, library_name) << std::endl;   
                        
                        std::cout << "Starting mergeRedIBPs_gpi..." << std::endl;
                        reducedIBPs = RESOLVE_INTERFACE_FUNCTION(singular_mergeRedIBPs_gpi)(reducedIBPs, reducedIBPs_jk, library_name, base_filename);
                        std::cout << "Merged reducedIBPs: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(reducedIBPs, library_name) << std::endl;

                        std::cout << "Starting mergeMI_gpi..." << std::endl;
                        MI = RESOLVE_INTERFACE_FUNCTION(singular_mergeMI_gpi)(MI, MI_jk, library_name, base_filename);  
                        std::cout << "Merged MI: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(MI, library_name) << std::endl;

                        std::cout << "Starting merge_web_gpi..." << std::endl;
                        web = RESOLVE_INTERFACE_FUNCTION(singular_merge_web_gpi)(web, web_jk, library_name, base_filename);
                        std::cout << "Merged web: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(web, library_name) << std::endl;    
                        
                    }

                    int j = 3, k = 3;
                    std::cout << "Computing j=3, k=3..." << std::endl;
                    std::string data_33 = RESOLVE_INTERFACE_FUNCTION(singular_getReducedIBPSystemCompute_gpi)(
                        labeledgraph, web, reducedIBPs, MI, j, k, library_name, base_filename
                    );  
                    std::cout << "data_33: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(data_33, library_name) << std::endl;

                    web_33 = RESOLVE_INTERFACE_FUNCTION(singular_getWeb_gpi)(data_33, library_name, base_filename);
                    //std::cout << "web_33: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(web_33, library_name) << std::endl;
                    reducedIBPs_33 = RESOLVE_INTERFACE_FUNCTION(singular_getReducedIBPs_gpi)(data_33, library_name, base_filename); 
                    //std::cout << "reducedIBPs_33: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(reducedIBPs_33, library_name) << std::endl;
                    MI_33 = RESOLVE_INTERFACE_FUNCTION(singular_getMI_gpi)(data_33, library_name, base_filename);
                    //std::cout << "MI_33: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(MI_33, library_name) << std::endl;
                    std::cout<<"finished T_33"<<std::endl;  
                    

                    ]]></code>
                </module>
            </defun>
            <connect-in port="control_33" place="control_33"/>
            <connect-read port="MI_22" place="MI_22"/>
            <connect-read port="web_22" place="web_22"/>
            <connect-read port="reducedIBPs_22" place="reducedIBPs_22"/>
            <connect-read port="MI_23" place="MI_23"/>
            <connect-read port="web_23" place="web_23"/>
            <connect-read port="reducedIBPs_23" place="reducedIBPs_23"/>
            <connect-read port="base_filename" place="base_filename"/>
            <connect-read port="library_name" place="library_name"/>
            <connect-read port="labeledgraph" place="labeledgraph"/>
            <connect-out port="MI_33" place="MI_33"/>
            <connect-out port="web_33" place="web_33"/>
            <connect-out port="reducedIBPs_33" place="reducedIBPs_33"/>
        </transition>
       
       <transition name="T_end">
    <defun>
        <require key="worker" mandatory="true"/>
        <in name="MI_31" type="string"/>
        <in name="web_31" type="string"/>
        <in name="reducedIBPs_31" type="string"/>
        <in name="MI_32" type="string"/>
        <in name="web_32" type="string"/>
        <in name="reducedIBPs_32" type="string"/>
        <in name="MI_33" type="string"/>
        <in name="web_33" type="string"/>
        <in name="reducedIBPs_33" type="string"/>
        <out name="final_MI" type="string"/>
        <out name="final_web" type="string"/>
        <out name="final_reducedIBPs" type="string"/>
        <in name="base_filename" type="string"/> <!-- Added for consistency -->
        <in name="library_name" type="string"/>  <!-- Added for consistency -->
        <in name="control_end" type="control"/>
        <module name="singular_template" require_function_unloads_without_rest="false" function="f_T_end(control_end, base_filename, library_name, MI_31, web_31, reducedIBPs_31, MI_32, web_32, reducedIBPs_32, MI_33, web_33, reducedIBPs_33, final_MI, final_web, final_reducedIBPs)">
            <cinclude href="interface/template_interface.hpp"/>
            <cinclude href="util-generic/dynamic_linking.hpp"/>
            <code><![CDATA[
                std::cout << "Starting T_end..." << std::endl;

                // Merge MI tokens
                std::string temp_MI = RESOLVE_INTERFACE_FUNCTION(singular_mergeMI_gpi)(MI_31, MI_32, library_name, base_filename);
                std::string final_MI = RESOLVE_INTERFACE_FUNCTION(singular_mergeMI_gpi)(temp_MI, MI_33, library_name, base_filename);

                // Merge web tokens
                std::string temp_web = RESOLVE_INTERFACE_FUNCTION(singular_merge_web_gpi)(web_31, web_32, library_name, base_filename);
                std::string final_web = RESOLVE_INTERFACE_FUNCTION(singular_merge_web_gpi)(temp_web, web_33, library_name, base_filename);

                // Merge reducedIBPs tokens
                std::string temp_reducedIBPs = RESOLVE_INTERFACE_FUNCTION(singular_mergeRedIBPs_gpi)(reducedIBPs_31, reducedIBPs_32, library_name, base_filename);
                std::string final_reducedIBPs = RESOLVE_INTERFACE_FUNCTION(singular_mergeRedIBPs_gpi)(temp_reducedIBPs, reducedIBPs_33, library_name, base_filename);

                // Print final results
                std::cout << "Final MI: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(final_MI, library_name) << std::endl;
                std::cout << "Final web: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(final_web, library_name) << std::endl;
                std::cout << "Final reducedIBPs: " << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(final_reducedIBPs, library_name) << std::endl;
                std::cout << "Finished T_end" << std::endl;
            ]]></code>
        </module>
    </defun>
    <connect-in port="control_end" place="control_end"/>
    <connect-read port="MI_31" place="MI_31"/>
    <connect-read port="web_31" place="web_31"/>
    <connect-read port="reducedIBPs_31" place="reducedIBPs_31"/>
    <connect-read port="MI_32" place="MI_32"/>
    <connect-read port="web_32" place="web_32"/>
    <connect-read port="reducedIBPs_32" place="reducedIBPs_32"/>
    <connect-read port="MI_33" place="MI_33"/>
    <connect-read port="web_33" place="web_33"/>
    <connect-read port="reducedIBPs_33" place="reducedIBPs_33"/>
    <connect-read port="base_filename" place="base_filename"/> <!-- Added -->
    <connect-read port="library_name" place="library_name"/>   <!-- Added -->
    <connect-out port="final_MI" place="final_MI"/>
    <connect-out port="final_web" place="final_web"/>
    <connect-out port="final_reducedIBPs" place="final_reducedIBPs"/>
</transition>
    </net>
</defun>
