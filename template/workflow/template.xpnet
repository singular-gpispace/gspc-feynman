<?xml version="1.0" encoding="UTF-8"?>
<defun name="template">

    <in name="base_filename" type="string" place="base_filename"/>
    <in name="library_name" type="string" place="library_name"/>
    <in name="input" type="string" place="input"/>
    <out name="output" type="string" place="output"/>

    <net>
        <place name="base_filename" type="string">
        </place>
        <place name="library_name" type="string">
        </place>
        <place name="input" type="string">
        </place>
        <place name="labeledgraph" type="string">
        </place>
        <place name="control_11" type="control">
            <token><value>[]</value></token>
        </place>
        <place name="output" type="string">
        </place>
        <place name="web" type="string">
        </place>

        <!-- Graph creation and labeling transition -->
        <transition name="T_11">
            <defun>
                <require key="worker" mandatory="true"/>

                <out name="labeledgraph" type="string"/>
                <out name="output" type="string"/>          
                <in name="library_name" type="string"/>
                <in name="base_filename" type="string"/>
                <out name="web" type="string"/>
                <in name="input" type="string"/>
                <in name="control_11" type="control"/>
                <module name="singular_template" require_function_unloads_without_rest="false" function="f_T_11(control_11, web, library_name, base_filename, input, labeledgraph, output    )">
                    <cinclude href="interface/template_interface.hpp"/>
                    <cinclude href="util-generic/dynamic_linking.hpp"/>
                    <code><![CDATA[
                     
                            std::cout << "Starting T_11..." << std::endl;
                            
                            // Create the graph with proper ring initialization
                             labeledgraph = RESOLVE_INTERFACE_FUNCTION(singular_computeBaikovMatrix_gpi)(input, library_name, base_filename);
                            std::cout << "singular_computeBaikovMatrix_gpi:" << std::endl;
                          std::cout<< RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(labeledgraph, library_name)<<std::endl;
                            web = RESOLVE_INTERFACE_FUNCTION(singular_updateWeb_gpi)
            				( 
							   input, library_name, base_filename
							);
                              std::cout << "computing_M1" << std::endl;
                           //std::string module1 = RESOLVE_INTERFACE_FUNCTION(singular_computeM1_gpi)(labeledgraph, library_name, base_filename);
                           /* std::cout << "printing module1:" << std::endl;
                            std::cout<< RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(module1, library_name)<<std::endl;
                            */
                           // std::cout << "computing_target_ints" << std::endl;
                            std::string target_ints = RESOLVE_INTERFACE_FUNCTION(singular_getTargetInts_gpi)(web, 1, 1, library_name, base_filename);
                           // std::cout << "printing target_ints:" << std::endl;
                           // std::cout<< RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(target_ints, library_name)<<std::endl;

                            std::cout << "computing_M2 in T_11" << std::endl;
                            std::string m2 = RESOLVE_INTERFACE_FUNCTION(singular_computeM2_gp)(labeledgraph, target_ints, library_name, base_filename);
                         std::cout << "printing module2 in T_11:" << std::endl;
                            std::cout<< RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(m2, library_name)<<std::endl;

                        std::cout << "T_11 completed" << std::endl;
                        output=m2;  
                    ]]></code>
                </module>
            </defun>
            <connect-in port="control_11" place="control_11"/>
            <connect-read port="library_name" place="library_name"/>
            <connect-read port="base_filename" place="base_filename"/>
            <connect-read port="input" place="input"/>
            <connect-out port="labeledgraph" place="labeledgraph"/>
            <connect-out port="output" place="output"/>
            <connect-out port="web" place="web"/>
        </transition>

    </net>
</defun>
