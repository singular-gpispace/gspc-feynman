<defun name="template">
  <in name="base_filename" type="string" place="place_base_filename"/>
  <in name="library_name" type="string" place="place_library_name"/>
  <in name="input" type="string" place="place_input"/>
  <out name="output" type="string" place="totalIBP"/>
  <net>
    <place name="place_input" type="string"/>

    <place name="place_base_filename" type="string"/>
    <place name="place_library_name" type="string"/>
    <place name="input_control" type="control">
      <token>
        <value>[]</value>
      </token>
    </place>

    <transition name="compute">
      <defun>
        <require key="worker" mandatory="true"/>
        <in name="input_control" type="control"/>
        <in name="library_name" type="string"/>
        <in name="base_filename" type="string"/>
        <in name="input" type="string"/>
        <out name="labeledgraph" type="string"/>
        <out name="web" type="string"/>
        <out name="reducedIBPs" type="string"/>
        <out name="MI" type="string"/>

        <module name="singular_template" require_function_unloads_without_rest="false" function="compute(input_control,input,library_name,base_filename,labeledgraph,web,reducedIBPs,MI)">
          <cinclude href="interface/template_interface.hpp" />
          <cinclude href="util-generic/dynamic_linking.hpp"/>
          <code><![CDATA[
						labeledgraph = RESOLVE_INTERFACE_FUNCTION(singular_getReducedIBPSystem_gpi)
            				( 
							   input, library_name, base_filename
							);
              web = RESOLVE_INTERFACE_FUNCTION(singular_updateWeb_gpi)
            				( 
							   input, library_name, base_filename
							);
                 reducedIBPs = RESOLVE_INTERFACE_FUNCTION(singular_reducedIBPs_gpi)
            				( 
							   input, library_name, base_filename
							);   
              MI = RESOLVE_INTERFACE_FUNCTION(singular_MI_gpi)
            				( 
							   input, library_name, base_filename
							);
            		]]>          </code>
        </module>
      </defun>
      <connect-read port="library_name" place="place_library_name"/>
      <connect-read port="base_filename" place="place_base_filename"/>
      <connect-read port="input" place="place_input"/>
      <connect-in port="input_control" place="input_control"/>
      <connect-out port="labeledgraph" place="labeledgraph"/>
      <connect-out port="web" place="web"/>
      <connect-out port="reducedIBPs" place="reducedIBPs"/>
      <connect-out port="MI" place="MI"/>

    </transition>

    <place name="labeledgraph" type="string"/>
    <place name="web" type="string"/>
    <place name="reducedIBPs" type="string"/>
    <place name="MI" type="string"/>


    <transition name="compute1">
      <defun>
        <require key="worker" mandatory="true"/>
        <in name="library_name" type="string"/>
        <in name="base_filename" type="string"/>
        <in name="web" type="string"/>
        <in name="labeledgraph" type="string"/>
        <in name="input" type="string"/>
        <in name="MI" type="string"/>

        <out name="totalIBP" type="string"/>

        <module name="singular_template" require_function_unloads_without_rest="false" function="compute1(MI,input,labeledgraph,totalIBP,web,library_name,base_filename)">
          <cinclude href="interface/template_interface.hpp" />
          <cinclude href="util-generic/dynamic_linking.hpp"/>
          <code><![CDATA[
    
       
 int j=1;
 int k=1;
 std::string M1 = RESOLVE_INTERFACE_FUNCTION(singular_computeM1_gpi)
            				( 
							  labeledgraph, library_name, base_filename
							);
    std::cout << "computing_target_ints" << std::endl;
    std::string target_ints = RESOLVE_INTERFACE_FUNCTION(singular_getTargetInts_gpi)(web, 1, 1, library_name, base_filename);
     std::cout << "printing target_ints:" << std::endl;

     std::string lg= RESOLVE_INTERFACE_FUNCTION(singular_getBaikovMatrix_gpi)(input, library_name, base_filename);
        std::cout << "printing lg:" << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(lg, library_name) << std::endl;
        std::cout << "printing target_ints:" << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(target_ints, library_name) << std::endl;
        std::cout << "printing M1:" << std::endl;
     std::string m2 = RESOLVE_INTERFACE_FUNCTION(singular_computeM2_gp)(lg, target_ints, library_name, base_filename);
        std::cout << "printing m2:" << std::endl;
  std::string M2 = RESOLVE_INTERFACE_FUNCTION(singular_computeM2_gpi)
            				( 
							  labeledgraph,web,j,k ,library_name, base_filename
							);
/**********************************************************************************************/
         std::string M = RESOLVE_INTERFACE_FUNCTION(singular_intersection_gpi)
            				( 
							  M1,M2,library_name, base_filename
							);
                  std::string MM = RESOLVE_INTERFACE_FUNCTION(singular_std_gpi)
            				( 
							  M,library_name, base_filename
							);
  
            		]]>
          </code>
        </module>
      </defun>
      <connect-read port="library_name" place="place_library_name"/>
      <connect-read port="base_filename" place="place_base_filename"/>
      <connect-in port="web" place="web"/>
      <connect-in port="MI" place="MI"/>
      <connect-in port="labeledgraph" place="labeledgraph"/>
      <connect-read port="input" place="place_input"/>
      <connect-out port="totalIBP" place="totalIBP"/>

    </transition>

    <place name="totalIBP" type="string"/>


  </net>
</defun>