<defun name="template">
  <in name="base_filename" type="string" place="place_base_filename"/>
  <in name="library_name" type="string" place="place_library_name"/>
  <in name="input" type="string" place="place_input"/>
  <out name="output" type="string" place="totalIBP"/>
  <net>
    <place name="place_input" type="string"/>

    <place name="place_base_filename" type="string"/>
    <place name="place_library_name" type="string"/>
    <place name="input_control" type="control">
      <token>
        <value>[]</value>
      </token>
    </place>

    <transition name="compute">
      <defun>
        <require key="worker" mandatory="true"/>
        <in name="input_control" type="control"/>
        <in name="library_name" type="string"/>
        <in name="base_filename" type="string"/>
        <in name="input" type="string"/>
        <out name="labeledgraph" type="string"/>
        <out name="web" type="string"/>
        <out name="reducedIBPs" type="string"/>
        <out name="MI" type="string"/>

        <module name="singular_template" require_function_unloads_without_rest="false" function="compute(input_control,input,library_name,base_filename,labeledgraph,web,reducedIBPs,MI)">
          <cinclude href="interface/template_interface.hpp" />
          <cinclude href="util-generic/dynamic_linking.hpp"/>
          <code><![CDATA[
						labeledgraph = RESOLVE_INTERFACE_FUNCTION(singular_getReducedIBPSystem_gpi)
            				( 
							   input, library_name, base_filename
							);
              web = RESOLVE_INTERFACE_FUNCTION(singular_updateWeb_gpi)
            				( 
							   input, library_name, base_filename
							);
                 reducedIBPs = RESOLVE_INTERFACE_FUNCTION(singular_reducedIBPs_gpi)
            				( 
							   input, library_name, base_filename
							);   
              MI = RESOLVE_INTERFACE_FUNCTION(singular_MI_gpi)
            				( 
							   input, library_name, base_filename
							);
            		]]>          </code>
        </module>
      </defun>
      <connect-read port="library_name" place="place_library_name"/>
      <connect-read port="base_filename" place="place_base_filename"/>
      <connect-read port="input" place="place_input"/>
      <connect-in port="input_control" place="input_control"/>
      <connect-out port="labeledgraph" place="labeledgraph"/>
      <connect-out port="web" place="web"/>
      <connect-out port="reducedIBPs" place="reducedIBPs"/>
      <connect-out port="MI" place="MI"/>

    </transition>

    <place name="labeledgraph" type="string"/>
    <place name="web" type="string"/>
    <place name="reducedIBPs" type="string"/>
    <place name="MI" type="string"/>


    <transition name="compute1">
      <defun>
        <require key="worker" mandatory="true"/>
        <in name="library_name" type="string"/>
        <in name="base_filename" type="string"/>
        <in name="web" type="string"/>
        <in name="labeledgraph" type="string"/>
        <in name="input" type="string"/>
        <in name="MI" type="string"/>

        <out name="totalIBP" type="string"/>

        <module name="singular_template" require_function_unloads_without_rest="false" function="compute1(MI,input,labeledgraph,totalIBP,web,library_name,base_filename)">
          <cinclude href="interface/template_interface.hpp" />
          <cinclude href="util-generic/dynamic_linking.hpp"/>
          <code><![CDATA[
    
       
 int i=1;
  totalIBP = RESOLVE_INTERFACE_FUNCTION(singular_computeManyIBP_gpi)
            				( 
							  labeledgraph, web,i,i, library_name, base_filename
							);

/**********************************************************************************************/
          std::string  reducedIBPs = RESOLVE_INTERFACE_FUNCTION(singular_setIBP_gpi)
            				( 
							  1, library_name, base_filename
							);
/**********************************************************************************************/

/**********************************************************************************************/
          std::string    reducedIBPs_seed = RESOLVE_INTERFACE_FUNCTION(singular_seed_gpi)
            				( 
							  reducedIBPs, library_name, base_filename
							);

/**********************************************************************************************/
std::string  targetInt = RESOLVE_INTERFACE_FUNCTION(singular_targetInt_gpi)
            				( 
							  input,library_name, base_filename
							);
/**********************************************************************************************/
std::string  reducedIbp_seeds = RESOLVE_INTERFACE_FUNCTION(singular_equal_gpi)
            				( 
							  reducedIBPs_seed, targetInt,library_name, base_filename
							);
/**********************************************************************************************/
  int te=0;

          if(te==0){
          std::string  reducedibp_over = RESOLVE_INTERFACE_FUNCTION(singular_over_gpi)
            				( 
							 reducedIBPs,library_name, base_filename
							);

                std::string  totalIBP_over = RESOLVE_INTERFACE_FUNCTION(singular_over_gpi)
            				( 
							 totalIBP,library_name, base_filename
							);
/**********************************************************************************************/
std::string  reducedIbp_seeds = RESOLVE_INTERFACE_FUNCTION(singular_equal_gpi)
            				( 
							  reducedibp_over, totalIBP_over,library_name, base_filename
							);
            te=te+1;
          }
/**********************************************************************************************/
int pp=101;
std::string  L = RESOLVE_INTERFACE_FUNCTION(singular_getRedIBPs_gpi)
            				( 
							 totalIBP,pp,library_name, base_filename
							);
std::string  indpndIBP = RESOLVE_INTERFACE_FUNCTION(singular_indpndIBP_gpi)
            				( 
							 L,library_name, base_filename
							);
std::string  masterAndTailIntgrals = RESOLVE_INTERFACE_FUNCTION(singular_masterAndTailIntgrals_gpi)
            				( 
							 L,library_name, base_filename
							);
  std::string  reducedIBPs_IBP = RESOLVE_INTERFACE_FUNCTION(singular_IBP_gpi)
            				( 
							 reducedIBPs,library_name, base_filename
							);
 int size_reducedIBPs_ibp = RESOLVE_INTERFACE_FUNCTION(singular_size_gpi)
            				( 
							 reducedIBPs_IBP,library_name, base_filename
							);
  /**********************************************************************************************/

  if(size_reducedIBPs_ibp==0)
          {
        std::string  reducedIBPs_IBPs = RESOLVE_INTERFACE_FUNCTION(singular_equal_gpi)
            				( 
							  reducedIBPs_IBP, indpndIBP,library_name, base_filename
							);
          }

  else
  {
    int indpndIBP_size = RESOLVE_INTERFACE_FUNCTION(singular_size_gpi)
      (
        indpndIBP, library_name, base_filename
        );
    for (int i = 1;i <= indpndIBP_size;i++)
    {
     std::string  reducedIBPs_IBP_i = RESOLVE_INTERFACE_FUNCTION(singular_Return_place)
               (
           reducedIBPs_IBP, indpndIBP_size+1,library_name, base_filename
         );
         std::string  indpndIBP_i = RESOLVE_INTERFACE_FUNCTION(singular_Return_place)
               (
           indpndIBP, i,library_name, base_filename
         );
           std::string  reducedIBPs_IBP_place_i = RESOLVE_INTERFACE_FUNCTION(singular_equal_gpi)
               (
           reducedIBPs_IBP_i, indpndIBP_i,library_name, base_filename
         );
    }
  }
  /**********************************************************************************************/
  int j=1;
  int k=1;
     std::string  w = RESOLVE_INTERFACE_FUNCTION(singular_updateWeb_later)
               (
           web,masterAndTailIntgrals, j,k,library_name, base_filename
         );
          std::string  w1 = RESOLVE_INTERFACE_FUNCTION(singular_Return_place)
               (
           w, 1,library_name, base_filename
         );   
        std::string  web1 = RESOLVE_INTERFACE_FUNCTION(singular_equal_gpi)
               (
           web, w1,library_name, base_filename
         );      
         std::string  masterIntgralsInSector = RESOLVE_INTERFACE_FUNCTION(singular_Return_place)
               (
           w, 2,library_name, base_filename
         );
/**********************************************************************************************/
  int MI_size = RESOLVE_INTERFACE_FUNCTION(singular_size_gpi)
            				( 
							 MI,library_name, base_filename
							);

   if(MI_size==0)
          { 
           std::string  MI_update = RESOLVE_INTERFACE_FUNCTION(singular_equal_gpi)
               (
           MI, masterIntgralsInSector,library_name, base_filename
         );      
          }
         /*  else
          {
          int masterIntgralsInSector_size = RESOLVE_INTERFACE_FUNCTION(singular_size_gpi)
            				( 
							 masterIntgralsInSector,library_name, base_filename
							);
            for(int i=1;i <= masterIntgralsInSector_size;i++)
            {
              std::string  masterIntgralsInSector_i = RESOLVE_INTERFACE_FUNCTION(singular_Return_place)
               (
           masterIntgralsInSector, i,library_name, base_filename
         );
              int alreadyIntheList = RESOLVE_INTERFACE_FUNCTION(singular_alreadyIntheList_gpi)
               (
           MI, masterIntgralsInSector_i,library_name
         );      
              if(alreadyIntheList==0)
              {
              std::string  MI_i = RESOLVE_INTERFACE_FUNCTION(singular_Return_place)
               (
           MI, MI_size+1,library_name, base_filename
         );
    std::string  masterIntgralsInSector_i = RESOLVE_INTERFACE_FUNCTION(singular_equal_gpi)
               (
           MI_i, masterIntgralsInSector_i,library_name, base_filename
         );
              }
            }
          }
    */
            		]]>
          </code>
        </module>
      </defun>
      <connect-read port="library_name" place="place_library_name"/>
      <connect-read port="base_filename" place="place_base_filename"/>
      <connect-in port="web" place="web"/>
      <connect-in port="MI" place="MI"/>
      <connect-in port="labeledgraph" place="labeledgraph"/>
      <connect-read port="input" place="place_input"/>
      <connect-out port="totalIBP" place="totalIBP"/>

    </transition>

    <place name="totalIBP" type="string"/>


  </net>
</defun>