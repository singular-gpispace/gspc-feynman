<?xml version="1.0" encoding="UTF-8"?>
<defun name="template">

    <in name="base_filename" type="string" place="base_filename"/>
    <in name="library_name" type="string" place="library_name"/>
    <in name="input" type="string" place="input"/>
    <out name="output" type="string" place="output"/>

    <net>
        <place name="base_filename" type="string">
        </place>
        <place name="library_name" type="string">
        </place>
        <place name="input" type="string">
        </place>
        <place name="labeledgraph" type="string">
        </place>
        <place name="control_11" type="control">
            <token><value>[]</value></token>
        </place>
        <place name="output" type="string">
        </place>
       

        <!-- Graph creation and labeling transition -->
        <transition name="T_11">
            <defun>
                <require key="worker" mandatory="true"/>

                <out name="labeledgraph" type="string"/>
                <in name="library_name" type="string"/>
                <in name="base_filename" type="string"/>
                <in name="input" type="string"/>
                <in name="control_11" type="control"/>
                <module name="singular_template" require_function_unloads_without_rest="false" function="f_T_11(control_11, library_name, base_filename, input, labeledgraph)">
                    <cinclude href="interface/template_interface.hpp"/>
                    <cinclude href="util-generic/dynamic_linking.hpp"/>
                    <code><![CDATA[
                        std::cout << "Starting T_11..." << std::endl;
                        
                        // Create the graph
                        std::string graph = RESOLVE_INTERFACE_FUNCTION(singular_makegraph)(input, library_name, base_filename);
                        std::cout << "Graph structure (using printGpiTokenContent):" << std::endl;
                        std::string tokenContent = RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(graph, library_name);
                        std::cout << tokenContent << std::endl;

                        // Label the graph
                        std::string labeled = RESOLVE_INTERFACE_FUNCTION(singular_template_graph)(graph, library_name, base_filename);
                        std::cout << "Labeled graph structure (using printGpiTokenContent):" << std::endl;
                        std::string labeledTokenContent = RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(labeled, library_name);
                        std::cout << labeledTokenContent << std::endl;
                        
                        // Compute Baikov matrix
                        std::string baikov = RESOLVE_INTERFACE_FUNCTION(singular_process_graph)(labeled, library_name, base_filename);
                        std::cout << "Baikov matrix (using printGpiTokenContent):" << std::endl;
                        std::string baikovTokenContent = RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(baikov, library_name);
                        std::cout << baikovTokenContent << std::endl;
                      
                        std::cout << "Finished T_11" << std::endl;
                    ]]></code>
                </module>
            </defun>
            <connect-in port="control_11" place="control_11"/>
            <connect-read port="library_name" place="library_name"/>
            <connect-read port="base_filename" place="base_filename"/>
            <connect-read port="input" place="input"/>
            <connect-out port="labeledgraph" place="labeledgraph"/>
        </transition>

    </net>
</defun>
