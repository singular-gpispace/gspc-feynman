<?xml version="1.0" encoding="UTF-8"?>
<defun name="template">

    <in name="base_filename" type="string" place="base_filename"/>
    <in name="library_name" type="string" place="library_name"/>
    <in name="input" type="string" place="input"/>
    <out name="output" type="string" place="output"/>

    <net>
        <place name="base_filename" type="string">
        </place>
        <place name="library_name" type="string">
        </place>
        <place name="input" type="string">
        </place>
        <place name="labeledgraph" type="string">
        </place>
        <place name="web" type="string">
        </place>
        <place name="tail_00" type="string">
        </place>
        <place name="output" type="string">
        </place>
        <place name="control_11" type="control">
            <token><value>[]</value></token>
        </place>
        <place name="tail_11" type="string">
        </place>
        <place name="control_21" type="control">
            <token><value>[]</value></token>
        </place>
        <place name="tail_21" type="string">
        </place>
        <place name="control_22" type="control">
            <token><value>[]</value></token>
        </place>
        <place name="tail_22" type="string">
        </place>
        <place name="control_23" type="control">
            <token><value>[]</value></token>
        </place>
        <place name="tail_23" type="string">
        </place>
        <place name="control_24" type="control">
            <token><value>[]</value></token>
        </place>
        <place name="tail_24" type="string">
        </place>
        <place name="control_31" type="control">
            <token><value>[]</value></token>
        </place>
        <place name="tail_31" type="string">
        </place>
        <place name="control_32" type="control">
            <token><value>[]</value></token>
        </place>
        <place name="tail_32" type="string">
        </place>
        <place name="control_33" type="control">
            <token><value>[]</value></token>
        </place>
        <place name="tail_33" type="string">
        </place>
        <place name="control_34" type="control">
            <token><value>[]</value></token>
        </place>
        <place name="tail_34" type="string">
        </place>
        <place name="control_35" type="control">
            <token><value>[]</value></token>
        </place>
        <place name="tail_35" type="string">
        </place>
        <place name="control_36" type="control">
            <token><value>[]</value></token>
        </place>
        <place name="tail_36" type="string">
        </place>
        <place name="control_41" type="control">
            <token><value>[]</value></token>
        </place>
        <place name="tail_41" type="string">
        </place>
        <place name="control_42" type="control">
            <token><value>[]</value></token>
        </place>
        <place name="tail_42" type="string">
        </place>
        <place name="control_43" type="control">
            <token><value>[]</value></token>
        </place>
        <place name="tail_43" type="string">
        </place>
        <place name="control_44" type="control">
            <token><value>[]</value></token>
        </place>
        <place name="tail_44" type="string">
        </place>
        <place name="control_T_0" type="control">
            <token><value>[]</value></token>
        </place>
        <place name="control_T_end" type="control">
            <token><value>[]</value></token>
        </place>
        <transition name="T_11">
            <defun>
                <require key="worker" mandatory="true"/>

                <in name="control_11" type="control"/>
                <in name="labeledgraph" type="string"/>
                <in name="library_name" type="string"/>
                <in name="base_filename" type="string"/>
                <in name="input" type="string"/>
                <in name="web" type="string"/>
                <in name="tail_00" type="string"/>
                <out name="tail_11" type="string"/>
                <module name="singular_template" require_function_unloads_without_rest="false" function="f_T_11(control_11, labeledgraph, library_name, base_filename, input, web, tail_00, tail_11)">
                    <cinclude href="interface/template_interface.hpp"/>
                    <cinclude href="util-generic/dynamic_linking.hpp"/>
                    <code><![CDATA[
                        std::cout << "Starting T_11...\n";

                        std::vector<std::pair<int, int>> jk_pairs = {{0, 0}};
                        std::map<std::pair<int, int>, std::string> tail_jk;
                        tail_jk[{0, 0}] = tail_00;

                        std::string input_11 = RESOLVE_INTERFACE_FUNCTION(singular_makeUserInput_gpi)(tail_00, library_name, base_filename);
                        for (size_t i = 1; i < jk_pairs.size(); i++) {
                            auto [j, k] = jk_pairs[i];
                            std::string tail = tail_jk[{j, k}];
                            input_11 = RESOLVE_INTERFACE_FUNCTION(singular_append_list_gpi)(input_11, tail, library_name, base_filename);
                        }

                        std::string labels_11 = RESOLVE_INTERFACE_FUNCTION(singular_getlabels_gpi)(web, 1, 1, library_name, base_filename);
                        std::cout << "labels_11:" << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(labels_11, library_name) << std::endl;
/******************************************************************************************************************************************* */
                        std::cout << "Starting one sector computation in T_11\n";
                        auto computation_time_11 = std::chrono::high_resolution_clock::now();
                        std::string one_sector_11 = RESOLVE_INTERFACE_FUNCTION(singular_computeSector_flint)(labeledgraph, input_11, labels_11, 7853, library_name, base_filename);
                        auto computation_end_time_11 = std::chrono::high_resolution_clock::now();
                        auto computation_duration_11 = std::chrono::duration_cast<std::chrono::seconds>(computation_end_time_11 - computation_time_11);
                        std::cout << "One sector computation completed in T_11 in " << computation_duration_11.count() << " seconds\n";
/******************************************************************************************************************************************* */
                        std::string size_of_one_sector = RESOLVE_INTERFACE_FUNCTION(singular_size_OneSectorComputation_gpi)(one_sector_11, library_name, base_filename);

                        tail_11 = RESOLVE_INTERFACE_FUNCTION(singular_gettail_gpi)(one_sector_11, library_name, base_filename);
                        std::cout << "T_11 completed\n";
                    ]]></code>
                </module>
            </defun>
            <connect-in port="control_11" place="control_11"/>
            <connect-read port="labeledgraph" place="labeledgraph"/>
            <connect-read port="library_name" place="library_name"/>
            <connect-read port="base_filename" place="base_filename"/>
            <connect-read port="input" place="input"/>
            <connect-read port="web" place="web"/>
            <connect-read port="tail_00" place="tail_00"/>
            <connect-out port="tail_11" place="tail_11"/>
        </transition>

        <transition name="T_21">
            <defun>
                <require key="worker" mandatory="true"/>

                <in name="control_21" type="control"/>
                <in name="labeledgraph" type="string"/>
                <in name="library_name" type="string"/>
                <in name="base_filename" type="string"/>
                <in name="input" type="string"/>
                <in name="web" type="string"/>
                <in name="tail_00" type="string"/>
                <in name="tail_11" type="string"/>
                <out name="tail_21" type="string"/>
                <module name="singular_template" require_function_unloads_without_rest="false" function="f_T_21(control_21, labeledgraph, library_name, base_filename, input, web, tail_00, tail_11, tail_21)">
                    <cinclude href="interface/template_interface.hpp"/>
                    <cinclude href="util-generic/dynamic_linking.hpp"/>
                    <code><![CDATA[
                        std::cout << "Starting T_21...\n";

                        std::vector<std::pair<int, int>> jk_pairs = {{0, 0}, {1, 1}};
                        std::map<std::pair<int, int>, std::string> tail_jk;
                        tail_jk[{0, 0}] = tail_00;
                        tail_jk[{1, 1}] = tail_11;

                        std::string input_21 = RESOLVE_INTERFACE_FUNCTION(singular_makeUserInput_gpi)(tail_00, library_name, base_filename);
                        for (size_t i = 1; i < jk_pairs.size(); i++) {
                            auto [j, k] = jk_pairs[i];
                            std::string tail = tail_jk[{j, k}];
                            input_21 = RESOLVE_INTERFACE_FUNCTION(singular_append_list_gpi)(input_21, tail, library_name, base_filename);
                        }

                        std::string labels_21 = RESOLVE_INTERFACE_FUNCTION(singular_getlabels_gpi)(web, 2, 1, library_name, base_filename);
                        std::cout << "labels_21:" << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(labels_21, library_name) << std::endl;
/******************************************************************************************************************************************* */
                        std::cout << "Starting one sector computation in T_21\n";
                        auto computation_time_21 = std::chrono::high_resolution_clock::now();
                        std::string one_sector_21 = RESOLVE_INTERFACE_FUNCTION(singular_computeSector_flint)(labeledgraph, input_21, labels_21, 7853, library_name, base_filename);
                        auto computation_end_time_21 = std::chrono::high_resolution_clock::now();
                        auto computation_duration_21 = std::chrono::duration_cast<std::chrono::seconds>(computation_end_time_21 - computation_time_21);
                        std::cout << "One sector computation completed in T_21 in " << computation_duration_21.count() << " seconds\n";
/******************************************************************************************************************************************* */
                        std::string size_of_one_sector = RESOLVE_INTERFACE_FUNCTION(singular_size_OneSectorComputation_gpi)(one_sector_21, library_name, base_filename);

                        tail_21 = RESOLVE_INTERFACE_FUNCTION(singular_gettail_gpi)(one_sector_21, library_name, base_filename);
                        std::cout << "T_21 completed\n";
                    ]]></code>
                </module>
            </defun>
            <connect-in port="control_21" place="control_21"/>
            <connect-read port="labeledgraph" place="labeledgraph"/>
            <connect-read port="library_name" place="library_name"/>
            <connect-read port="base_filename" place="base_filename"/>
            <connect-read port="input" place="input"/>
            <connect-read port="web" place="web"/>
            <connect-read port="tail_00" place="tail_00"/>
            <connect-read port="tail_11" place="tail_11"/>
            <connect-out port="tail_21" place="tail_21"/>
        </transition>

        <transition name="T_22">
            <defun>
                <require key="worker" mandatory="true"/>

                <in name="control_22" type="control"/>
                <in name="labeledgraph" type="string"/>
                <in name="library_name" type="string"/>
                <in name="base_filename" type="string"/>
                <in name="input" type="string"/>
                <in name="web" type="string"/>
                <in name="tail_00" type="string"/>
                <in name="tail_11" type="string"/>
                <out name="tail_22" type="string"/>
                <module name="singular_template" require_function_unloads_without_rest="false" function="f_T_22(control_22, labeledgraph, library_name, base_filename, input, web, tail_00, tail_11, tail_22)">
                    <cinclude href="interface/template_interface.hpp"/>
                    <cinclude href="util-generic/dynamic_linking.hpp"/>
                    <code><![CDATA[
                        std::cout << "Starting T_22...\n";

                        std::vector<std::pair<int, int>> jk_pairs = {{0, 0}, {1, 1}};
                        std::map<std::pair<int, int>, std::string> tail_jk;
                        tail_jk[{0, 0}] = tail_00;
                        tail_jk[{1, 1}] = tail_11;

                        std::string input_22 = RESOLVE_INTERFACE_FUNCTION(singular_makeUserInput_gpi)(tail_00, library_name, base_filename);
                        for (size_t i = 1; i < jk_pairs.size(); i++) {
                            auto [j, k] = jk_pairs[i];
                            std::string tail = tail_jk[{j, k}];
                            input_22 = RESOLVE_INTERFACE_FUNCTION(singular_append_list_gpi)(input_22, tail, library_name, base_filename);
                        }

                        std::string labels_22 = RESOLVE_INTERFACE_FUNCTION(singular_getlabels_gpi)(web, 2, 2, library_name, base_filename);
                        std::cout << "labels_22:" << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(labels_22, library_name) << std::endl;
/******************************************************************************************************************************************* */
                        std::cout << "Starting one sector computation in T_22\n";
                        auto computation_time_22 = std::chrono::high_resolution_clock::now();
                        std::string one_sector_22 = RESOLVE_INTERFACE_FUNCTION(singular_computeSector_flint)(labeledgraph, input_22, labels_22, 7853, library_name, base_filename);
                        auto computation_end_time_22 = std::chrono::high_resolution_clock::now();
                        auto computation_duration_22 = std::chrono::duration_cast<std::chrono::seconds>(computation_end_time_22 - computation_time_22);
                        std::cout << "One sector computation completed in T_22 in " << computation_duration_22.count() << " seconds\n";
/******************************************************************************************************************************************* */
                        std::string size_of_one_sector = RESOLVE_INTERFACE_FUNCTION(singular_size_OneSectorComputation_gpi)(one_sector_22, library_name, base_filename);

                        tail_22 = RESOLVE_INTERFACE_FUNCTION(singular_gettail_gpi)(one_sector_22, library_name, base_filename);
                        std::cout << "T_22 completed\n";
                    ]]></code>
                </module>
            </defun>
            <connect-in port="control_22" place="control_22"/>
            <connect-read port="labeledgraph" place="labeledgraph"/>
            <connect-read port="library_name" place="library_name"/>
            <connect-read port="base_filename" place="base_filename"/>
            <connect-read port="input" place="input"/>
            <connect-read port="web" place="web"/>
            <connect-read port="tail_00" place="tail_00"/>
            <connect-read port="tail_11" place="tail_11"/>
            <connect-out port="tail_22" place="tail_22"/>
        </transition>

        <transition name="T_23">
            <defun>
                <require key="worker" mandatory="true"/>

                <in name="control_23" type="control"/>
                <in name="labeledgraph" type="string"/>
                <in name="library_name" type="string"/>
                <in name="base_filename" type="string"/>
                <in name="input" type="string"/>
                <in name="web" type="string"/>
                <in name="tail_00" type="string"/>
                <in name="tail_11" type="string"/>
                <out name="tail_23" type="string"/>
                <module name="singular_template" require_function_unloads_without_rest="false" function="f_T_23(control_23, labeledgraph, library_name, base_filename, input, web, tail_00, tail_11, tail_23)">
                    <cinclude href="interface/template_interface.hpp"/>
                    <cinclude href="util-generic/dynamic_linking.hpp"/>
                    <code><![CDATA[
                        std::cout << "Starting T_23...\n";

                        std::vector<std::pair<int, int>> jk_pairs = {{0, 0}, {1, 1}};
                        std::map<std::pair<int, int>, std::string> tail_jk;
                        tail_jk[{0, 0}] = tail_00;
                        tail_jk[{1, 1}] = tail_11;

                        std::string input_23 = RESOLVE_INTERFACE_FUNCTION(singular_makeUserInput_gpi)(tail_00, library_name, base_filename);
                        for (size_t i = 1; i < jk_pairs.size(); i++) {
                            auto [j, k] = jk_pairs[i];
                            std::string tail = tail_jk[{j, k}];
                            input_23 = RESOLVE_INTERFACE_FUNCTION(singular_append_list_gpi)(input_23, tail, library_name, base_filename);
                        }

                        std::string labels_23 = RESOLVE_INTERFACE_FUNCTION(singular_getlabels_gpi)(web, 2, 3, library_name, base_filename);
                        std::cout << "labels_23:" << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(labels_23, library_name) << std::endl;
/******************************************************************************************************************************************* */
                        std::cout << "Starting one sector computation in T_23\n";
                        auto computation_time_23 = std::chrono::high_resolution_clock::now();
                        std::string one_sector_23 = RESOLVE_INTERFACE_FUNCTION(singular_computeSector_flint)(labeledgraph, input_23, labels_23, 7853, library_name, base_filename);
                        auto computation_end_time_23 = std::chrono::high_resolution_clock::now();
                        auto computation_duration_23 = std::chrono::duration_cast<std::chrono::seconds>(computation_end_time_23 - computation_time_23);
                        std::cout << "One sector computation completed in T_23 in " << computation_duration_23.count() << " seconds\n";
/******************************************************************************************************************************************* */
                        std::string size_of_one_sector = RESOLVE_INTERFACE_FUNCTION(singular_size_OneSectorComputation_gpi)(one_sector_23, library_name, base_filename);

                        tail_23 = RESOLVE_INTERFACE_FUNCTION(singular_gettail_gpi)(one_sector_23, library_name, base_filename);
                        std::cout << "T_23 completed\n";
                    ]]></code>
                </module>
            </defun>
            <connect-in port="control_23" place="control_23"/>
            <connect-read port="labeledgraph" place="labeledgraph"/>
            <connect-read port="library_name" place="library_name"/>
            <connect-read port="base_filename" place="base_filename"/>
            <connect-read port="input" place="input"/>
            <connect-read port="web" place="web"/>
            <connect-read port="tail_00" place="tail_00"/>
            <connect-read port="tail_11" place="tail_11"/>
            <connect-out port="tail_23" place="tail_23"/>
        </transition>

        <transition name="T_24">
            <defun>
                <require key="worker" mandatory="true"/>

                <in name="control_24" type="control"/>
                <in name="labeledgraph" type="string"/>
                <in name="library_name" type="string"/>
                <in name="base_filename" type="string"/>
                <in name="input" type="string"/>
                <in name="web" type="string"/>
                <in name="tail_00" type="string"/>
                <in name="tail_11" type="string"/>
                <out name="tail_24" type="string"/>
                <module name="singular_template" require_function_unloads_without_rest="false" function="f_T_24(control_24, labeledgraph, library_name, base_filename, input, web, tail_00, tail_11, tail_24)">
                    <cinclude href="interface/template_interface.hpp"/>
                    <cinclude href="util-generic/dynamic_linking.hpp"/>
                    <code><![CDATA[
                        std::cout << "Starting T_24...\n";

                        std::vector<std::pair<int, int>> jk_pairs = {{0, 0}, {1, 1}};
                        std::map<std::pair<int, int>, std::string> tail_jk;
                        tail_jk[{0, 0}] = tail_00;
                        tail_jk[{1, 1}] = tail_11;

                        std::string input_24 = RESOLVE_INTERFACE_FUNCTION(singular_makeUserInput_gpi)(tail_00, library_name, base_filename);
                        for (size_t i = 1; i < jk_pairs.size(); i++) {
                            auto [j, k] = jk_pairs[i];
                            std::string tail = tail_jk[{j, k}];
                            input_24 = RESOLVE_INTERFACE_FUNCTION(singular_append_list_gpi)(input_24, tail, library_name, base_filename);
                        }

                        std::string labels_24 = RESOLVE_INTERFACE_FUNCTION(singular_getlabels_gpi)(web, 2, 4, library_name, base_filename);
                        std::cout << "labels_24:" << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(labels_24, library_name) << std::endl;
/******************************************************************************************************************************************* */
                        std::cout << "Starting one sector computation in T_24\n";
                        auto computation_time_24 = std::chrono::high_resolution_clock::now();
                        std::string one_sector_24 = RESOLVE_INTERFACE_FUNCTION(singular_computeSector_flint)(labeledgraph, input_24, labels_24, 7853, library_name, base_filename);
                        auto computation_end_time_24 = std::chrono::high_resolution_clock::now();
                        auto computation_duration_24 = std::chrono::duration_cast<std::chrono::seconds>(computation_end_time_24 - computation_time_24);
                        std::cout << "One sector computation completed in T_24 in " << computation_duration_24.count() << " seconds\n";
/******************************************************************************************************************************************* */
                        std::string size_of_one_sector = RESOLVE_INTERFACE_FUNCTION(singular_size_OneSectorComputation_gpi)(one_sector_24, library_name, base_filename);

                        tail_24 = RESOLVE_INTERFACE_FUNCTION(singular_gettail_gpi)(one_sector_24, library_name, base_filename);
                        std::cout << "T_24 completed\n";
                    ]]></code>
                </module>
            </defun>
            <connect-in port="control_24" place="control_24"/>
            <connect-read port="labeledgraph" place="labeledgraph"/>
            <connect-read port="library_name" place="library_name"/>
            <connect-read port="base_filename" place="base_filename"/>
            <connect-read port="input" place="input"/>
            <connect-read port="web" place="web"/>
            <connect-read port="tail_00" place="tail_00"/>
            <connect-read port="tail_11" place="tail_11"/>
            <connect-out port="tail_24" place="tail_24"/>
        </transition>

        <transition name="T_31">
            <defun>
                <require key="worker" mandatory="true"/>

                <in name="control_31" type="control"/>
                <in name="labeledgraph" type="string"/>
                <in name="library_name" type="string"/>
                <in name="base_filename" type="string"/>
                <in name="input" type="string"/>
                <in name="web" type="string"/>
                <in name="tail_00" type="string"/>
                <in name="tail_21" type="string"/>
                <in name="tail_22" type="string"/>
                <out name="tail_31" type="string"/>
                <module name="singular_template" require_function_unloads_without_rest="false" function="f_T_31(control_31, labeledgraph, library_name, base_filename, input, web, tail_00, tail_21, tail_22, tail_31)">
                    <cinclude href="interface/template_interface.hpp"/>
                    <cinclude href="util-generic/dynamic_linking.hpp"/>
                    <code><![CDATA[
                        std::cout << "Starting T_31...\n";

                        std::vector<std::pair<int, int>> jk_pairs = {{0, 0}, {2, 1}, {2, 2}};
                        std::map<std::pair<int, int>, std::string> tail_jk;
                        tail_jk[{0, 0}] = tail_00;
                        tail_jk[{2, 1}] = tail_21;
                        tail_jk[{2, 2}] = tail_22;

                        std::string input_31 = RESOLVE_INTERFACE_FUNCTION(singular_makeUserInput_gpi)(tail_00, library_name, base_filename);
                        for (size_t i = 1; i < jk_pairs.size(); i++) {
                            auto [j, k] = jk_pairs[i];
                            std::string tail = tail_jk[{j, k}];
                            input_31 = RESOLVE_INTERFACE_FUNCTION(singular_append_list_gpi)(input_31, tail, library_name, base_filename);
                        }

                        std::string labels_31 = RESOLVE_INTERFACE_FUNCTION(singular_getlabels_gpi)(web, 3, 1, library_name, base_filename);
                        std::cout << "labels_31:" << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(labels_31, library_name) << std::endl;
/******************************************************************************************************************************************* */
                        std::cout << "Starting one sector computation in T_31\n";
                        auto computation_time_31 = std::chrono::high_resolution_clock::now();
                        std::string one_sector_31 = RESOLVE_INTERFACE_FUNCTION(singular_computeSector_flint)(labeledgraph, input_31, labels_31, 7853, library_name, base_filename);
                        auto computation_end_time_31 = std::chrono::high_resolution_clock::now();
                        auto computation_duration_31 = std::chrono::duration_cast<std::chrono::seconds>(computation_end_time_31 - computation_time_31);
                        std::cout << "One sector computation completed in T_31 in " << computation_duration_31.count() << " seconds\n";
/******************************************************************************************************************************************* */
                        std::string size_of_one_sector = RESOLVE_INTERFACE_FUNCTION(singular_size_OneSectorComputation_gpi)(one_sector_31, library_name, base_filename);

                        tail_31 = RESOLVE_INTERFACE_FUNCTION(singular_gettail_gpi)(one_sector_31, library_name, base_filename);
                        std::cout << "T_31 completed\n";
                    ]]></code>
                </module>
            </defun>
            <connect-in port="control_31" place="control_31"/>
            <connect-read port="labeledgraph" place="labeledgraph"/>
            <connect-read port="library_name" place="library_name"/>
            <connect-read port="base_filename" place="base_filename"/>
            <connect-read port="input" place="input"/>
            <connect-read port="web" place="web"/>
            <connect-read port="tail_00" place="tail_00"/>
            <connect-read port="tail_21" place="tail_21"/>
            <connect-read port="tail_22" place="tail_22"/>
            <connect-out port="tail_31" place="tail_31"/>
        </transition>

        <transition name="T_32">
            <defun>
                <require key="worker" mandatory="true"/>

                <in name="control_32" type="control"/>
                <in name="labeledgraph" type="string"/>
                <in name="library_name" type="string"/>
                <in name="base_filename" type="string"/>
                <in name="input" type="string"/>
                <in name="web" type="string"/>
                <in name="tail_00" type="string"/>
                <in name="tail_21" type="string"/>
                <in name="tail_23" type="string"/>
                <out name="tail_32" type="string"/>
                <module name="singular_template" require_function_unloads_without_rest="false" function="f_T_32(control_32, labeledgraph, library_name, base_filename, input, web, tail_00, tail_21, tail_23, tail_32)">
                    <cinclude href="interface/template_interface.hpp"/>
                    <cinclude href="util-generic/dynamic_linking.hpp"/>
                    <code><![CDATA[
                        std::cout << "Starting T_32...\n";

                        std::vector<std::pair<int, int>> jk_pairs = {{0, 0}, {2, 1}, {2, 3}};
                        std::map<std::pair<int, int>, std::string> tail_jk;
                        tail_jk[{0, 0}] = tail_00;
                        tail_jk[{2, 1}] = tail_21;
                        tail_jk[{2, 3}] = tail_23;

                        std::string input_32 = RESOLVE_INTERFACE_FUNCTION(singular_makeUserInput_gpi)(tail_00, library_name, base_filename);
                        for (size_t i = 1; i < jk_pairs.size(); i++) {
                            auto [j, k] = jk_pairs[i];
                            std::string tail = tail_jk[{j, k}];
                            input_32 = RESOLVE_INTERFACE_FUNCTION(singular_append_list_gpi)(input_32, tail, library_name, base_filename);
                        }

                        std::string labels_32 = RESOLVE_INTERFACE_FUNCTION(singular_getlabels_gpi)(web, 3, 2, library_name, base_filename);
                        std::cout << "labels_32:" << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(labels_32, library_name) << std::endl;
/******************************************************************************************************************************************* */
                        std::cout << "Starting one sector computation in T_32\n";
                        auto computation_time_32 = std::chrono::high_resolution_clock::now();
                        std::string one_sector_32 = RESOLVE_INTERFACE_FUNCTION(singular_computeSector_flint)(labeledgraph, input_32, labels_32, 7853, library_name, base_filename);
                        auto computation_end_time_32 = std::chrono::high_resolution_clock::now();
                        auto computation_duration_32 = std::chrono::duration_cast<std::chrono::seconds>(computation_end_time_32 - computation_time_32);
                        std::cout << "One sector computation completed in T_32 in " << computation_duration_32.count() << " seconds\n";
/******************************************************************************************************************************************* */
                        std::string size_of_one_sector = RESOLVE_INTERFACE_FUNCTION(singular_size_OneSectorComputation_gpi)(one_sector_32, library_name, base_filename);

                        tail_32 = RESOLVE_INTERFACE_FUNCTION(singular_gettail_gpi)(one_sector_32, library_name, base_filename);
                        std::cout << "T_32 completed\n";
                    ]]></code>
                </module>
            </defun>
            <connect-in port="control_32" place="control_32"/>
            <connect-read port="labeledgraph" place="labeledgraph"/>
            <connect-read port="library_name" place="library_name"/>
            <connect-read port="base_filename" place="base_filename"/>
            <connect-read port="input" place="input"/>
            <connect-read port="web" place="web"/>
            <connect-read port="tail_00" place="tail_00"/>
            <connect-read port="tail_21" place="tail_21"/>
            <connect-read port="tail_23" place="tail_23"/>
            <connect-out port="tail_32" place="tail_32"/>
        </transition>

        <transition name="T_33">
            <defun>
                <require key="worker" mandatory="true"/>

                <in name="control_33" type="control"/>
                <in name="labeledgraph" type="string"/>
                <in name="library_name" type="string"/>
                <in name="base_filename" type="string"/>
                <in name="input" type="string"/>
                <in name="web" type="string"/>
                <in name="tail_00" type="string"/>
                <in name="tail_22" type="string"/>
                <in name="tail_23" type="string"/>
                <out name="tail_33" type="string"/>
                <module name="singular_template" require_function_unloads_without_rest="false" function="f_T_33(control_33, labeledgraph, library_name, base_filename, input, web, tail_00, tail_22, tail_23, tail_33)">
                    <cinclude href="interface/template_interface.hpp"/>
                    <cinclude href="util-generic/dynamic_linking.hpp"/>
                    <code><![CDATA[
                        std::cout << "Starting T_33...\n";

                        std::vector<std::pair<int, int>> jk_pairs = {{0, 0}, {2, 2}, {2, 3}};
                        std::map<std::pair<int, int>, std::string> tail_jk;
                        tail_jk[{0, 0}] = tail_00;
                        tail_jk[{2, 2}] = tail_22;
                        tail_jk[{2, 3}] = tail_23;

                        std::string input_33 = RESOLVE_INTERFACE_FUNCTION(singular_makeUserInput_gpi)(tail_00, library_name, base_filename);
                        for (size_t i = 1; i < jk_pairs.size(); i++) {
                            auto [j, k] = jk_pairs[i];
                            std::string tail = tail_jk[{j, k}];
                            input_33 = RESOLVE_INTERFACE_FUNCTION(singular_append_list_gpi)(input_33, tail, library_name, base_filename);
                        }

                        std::string labels_33 = RESOLVE_INTERFACE_FUNCTION(singular_getlabels_gpi)(web, 3, 3, library_name, base_filename);
                        std::cout << "labels_33:" << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(labels_33, library_name) << std::endl;
/******************************************************************************************************************************************* */
                        std::cout << "Starting one sector computation in T_33\n";
                        auto computation_time_33 = std::chrono::high_resolution_clock::now();
                        std::string one_sector_33 = RESOLVE_INTERFACE_FUNCTION(singular_computeSector_flint)(labeledgraph, input_33, labels_33, 7853, library_name, base_filename);
                        auto computation_end_time_33 = std::chrono::high_resolution_clock::now();
                        auto computation_duration_33 = std::chrono::duration_cast<std::chrono::seconds>(computation_end_time_33 - computation_time_33);
                        std::cout << "One sector computation completed in T_33 in " << computation_duration_33.count() << " seconds\n";
/******************************************************************************************************************************************* */
                        std::string size_of_one_sector = RESOLVE_INTERFACE_FUNCTION(singular_size_OneSectorComputation_gpi)(one_sector_33, library_name, base_filename);

                        tail_33 = RESOLVE_INTERFACE_FUNCTION(singular_gettail_gpi)(one_sector_33, library_name, base_filename);
                        std::cout << "T_33 completed\n";
                    ]]></code>
                </module>
            </defun>
            <connect-in port="control_33" place="control_33"/>
            <connect-read port="labeledgraph" place="labeledgraph"/>
            <connect-read port="library_name" place="library_name"/>
            <connect-read port="base_filename" place="base_filename"/>
            <connect-read port="input" place="input"/>
            <connect-read port="web" place="web"/>
            <connect-read port="tail_00" place="tail_00"/>
            <connect-read port="tail_22" place="tail_22"/>
            <connect-read port="tail_23" place="tail_23"/>
            <connect-out port="tail_33" place="tail_33"/>
        </transition>

        <transition name="T_34">
            <defun>
                <require key="worker" mandatory="true"/>

                <in name="control_34" type="control"/>
                <in name="labeledgraph" type="string"/>
                <in name="library_name" type="string"/>
                <in name="base_filename" type="string"/>
                <in name="input" type="string"/>
                <in name="web" type="string"/>
                <in name="tail_00" type="string"/>
                <in name="tail_21" type="string"/>
                <in name="tail_24" type="string"/>
                <out name="tail_34" type="string"/>
                <module name="singular_template" require_function_unloads_without_rest="false" function="f_T_34(control_34, labeledgraph, library_name, base_filename, input, web, tail_00, tail_21, tail_24, tail_34)">
                    <cinclude href="interface/template_interface.hpp"/>
                    <cinclude href="util-generic/dynamic_linking.hpp"/>
                    <code><![CDATA[
                        std::cout << "Starting T_34...\n";

                        std::vector<std::pair<int, int>> jk_pairs = {{0, 0}, {2, 1}, {2, 4}};
                        std::map<std::pair<int, int>, std::string> tail_jk;
                        tail_jk[{0, 0}] = tail_00;
                        tail_jk[{2, 1}] = tail_21;
                        tail_jk[{2, 4}] = tail_24;

                        std::string input_34 = RESOLVE_INTERFACE_FUNCTION(singular_makeUserInput_gpi)(tail_00, library_name, base_filename);
                        for (size_t i = 1; i < jk_pairs.size(); i++) {
                            auto [j, k] = jk_pairs[i];
                            std::string tail = tail_jk[{j, k}];
                            input_34 = RESOLVE_INTERFACE_FUNCTION(singular_append_list_gpi)(input_34, tail, library_name, base_filename);
                        }

                        std::string labels_34 = RESOLVE_INTERFACE_FUNCTION(singular_getlabels_gpi)(web, 3, 4, library_name, base_filename);
                        std::cout << "labels_34:" << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(labels_34, library_name) << std::endl;
/******************************************************************************************************************************************* */
                        std::cout << "Starting one sector computation in T_34\n";
                        auto computation_time_34 = std::chrono::high_resolution_clock::now();
                        std::string one_sector_34 = RESOLVE_INTERFACE_FUNCTION(singular_computeSector_flint)(labeledgraph, input_34, labels_34, 7853, library_name, base_filename);
                        auto computation_end_time_34 = std::chrono::high_resolution_clock::now();
                        auto computation_duration_34 = std::chrono::duration_cast<std::chrono::seconds>(computation_end_time_34 - computation_time_34);
                        std::cout << "One sector computation completed in T_34 in " << computation_duration_34.count() << " seconds\n";
/******************************************************************************************************************************************* */
                        std::string size_of_one_sector = RESOLVE_INTERFACE_FUNCTION(singular_size_OneSectorComputation_gpi)(one_sector_34, library_name, base_filename);

                        tail_34 = RESOLVE_INTERFACE_FUNCTION(singular_gettail_gpi)(one_sector_34, library_name, base_filename);
                        std::cout << "T_34 completed\n";
                    ]]></code>
                </module>
            </defun>
            <connect-in port="control_34" place="control_34"/>
            <connect-read port="labeledgraph" place="labeledgraph"/>
            <connect-read port="library_name" place="library_name"/>
            <connect-read port="base_filename" place="base_filename"/>
            <connect-read port="input" place="input"/>
            <connect-read port="web" place="web"/>
            <connect-read port="tail_00" place="tail_00"/>
            <connect-read port="tail_21" place="tail_21"/>
            <connect-read port="tail_24" place="tail_24"/>
            <connect-out port="tail_34" place="tail_34"/>
        </transition>

        <transition name="T_35">
            <defun>
                <require key="worker" mandatory="true"/>

                <in name="control_35" type="control"/>
                <in name="labeledgraph" type="string"/>
                <in name="library_name" type="string"/>
                <in name="base_filename" type="string"/>
                <in name="input" type="string"/>
                <in name="web" type="string"/>
                <in name="tail_00" type="string"/>
                <in name="tail_22" type="string"/>
                <in name="tail_24" type="string"/>
                <out name="tail_35" type="string"/>
                <module name="singular_template" require_function_unloads_without_rest="false" function="f_T_35(control_35, labeledgraph, library_name, base_filename, input, web, tail_00, tail_22, tail_24, tail_35)">
                    <cinclude href="interface/template_interface.hpp"/>
                    <cinclude href="util-generic/dynamic_linking.hpp"/>
                    <code><![CDATA[
                        std::cout << "Starting T_35...\n";

                        std::vector<std::pair<int, int>> jk_pairs = {{0, 0}, {2, 2}, {2, 4}};
                        std::map<std::pair<int, int>, std::string> tail_jk;
                        tail_jk[{0, 0}] = tail_00;
                        tail_jk[{2, 2}] = tail_22;
                        tail_jk[{2, 4}] = tail_24;

                        std::string input_35 = RESOLVE_INTERFACE_FUNCTION(singular_makeUserInput_gpi)(tail_00, library_name, base_filename);
                        for (size_t i = 1; i < jk_pairs.size(); i++) {
                            auto [j, k] = jk_pairs[i];
                            std::string tail = tail_jk[{j, k}];
                            input_35 = RESOLVE_INTERFACE_FUNCTION(singular_append_list_gpi)(input_35, tail, library_name, base_filename);
                        }

                        std::string labels_35 = RESOLVE_INTERFACE_FUNCTION(singular_getlabels_gpi)(web, 3, 5, library_name, base_filename);
                        std::cout << "labels_35:" << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(labels_35, library_name) << std::endl;
/******************************************************************************************************************************************* */
                        std::cout << "Starting one sector computation in T_35\n";
                        auto computation_time_35 = std::chrono::high_resolution_clock::now();
                        std::string one_sector_35 = RESOLVE_INTERFACE_FUNCTION(singular_computeSector_flint)(labeledgraph, input_35, labels_35, 7853, library_name, base_filename);
                        auto computation_end_time_35 = std::chrono::high_resolution_clock::now();
                        auto computation_duration_35 = std::chrono::duration_cast<std::chrono::seconds>(computation_end_time_35 - computation_time_35);
                        std::cout << "One sector computation completed in T_35 in " << computation_duration_35.count() << " seconds\n";
/******************************************************************************************************************************************* */
                        std::string size_of_one_sector = RESOLVE_INTERFACE_FUNCTION(singular_size_OneSectorComputation_gpi)(one_sector_35, library_name, base_filename);

                        tail_35 = RESOLVE_INTERFACE_FUNCTION(singular_gettail_gpi)(one_sector_35, library_name, base_filename);
                        std::cout << "T_35 completed\n";
                    ]]></code>
                </module>
            </defun>
            <connect-in port="control_35" place="control_35"/>
            <connect-read port="labeledgraph" place="labeledgraph"/>
            <connect-read port="library_name" place="library_name"/>
            <connect-read port="base_filename" place="base_filename"/>
            <connect-read port="input" place="input"/>
            <connect-read port="web" place="web"/>
            <connect-read port="tail_00" place="tail_00"/>
            <connect-read port="tail_22" place="tail_22"/>
            <connect-read port="tail_24" place="tail_24"/>
            <connect-out port="tail_35" place="tail_35"/>
        </transition>

        <transition name="T_36">
            <defun>
                <require key="worker" mandatory="true"/>

                <in name="control_36" type="control"/>
                <in name="labeledgraph" type="string"/>
                <in name="library_name" type="string"/>
                <in name="base_filename" type="string"/>
                <in name="input" type="string"/>
                <in name="web" type="string"/>
                <in name="tail_00" type="string"/>
                <in name="tail_23" type="string"/>
                <in name="tail_24" type="string"/>
                <out name="tail_36" type="string"/>
                <module name="singular_template" require_function_unloads_without_rest="false" function="f_T_36(control_36, labeledgraph, library_name, base_filename, input, web, tail_00, tail_23, tail_24, tail_36)">
                    <cinclude href="interface/template_interface.hpp"/>
                    <cinclude href="util-generic/dynamic_linking.hpp"/>
                    <code><![CDATA[
                        std::cout << "Starting T_36...\n";

                        std::vector<std::pair<int, int>> jk_pairs = {{0, 0}, {2, 3}, {2, 4}};
                        std::map<std::pair<int, int>, std::string> tail_jk;
                        tail_jk[{0, 0}] = tail_00;
                        tail_jk[{2, 3}] = tail_23;
                        tail_jk[{2, 4}] = tail_24;

                        std::string input_36 = RESOLVE_INTERFACE_FUNCTION(singular_makeUserInput_gpi)(tail_00, library_name, base_filename);
                        for (size_t i = 1; i < jk_pairs.size(); i++) {
                            auto [j, k] = jk_pairs[i];
                            std::string tail = tail_jk[{j, k}];
                            input_36 = RESOLVE_INTERFACE_FUNCTION(singular_append_list_gpi)(input_36, tail, library_name, base_filename);
                        }

                        std::string labels_36 = RESOLVE_INTERFACE_FUNCTION(singular_getlabels_gpi)(web, 3, 6, library_name, base_filename);
                        std::cout << "labels_36:" << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(labels_36, library_name) << std::endl;
/******************************************************************************************************************************************* */
                        std::cout << "Starting one sector computation in T_36\n";
                        auto computation_time_36 = std::chrono::high_resolution_clock::now();
                        std::string one_sector_36 = RESOLVE_INTERFACE_FUNCTION(singular_computeSector_flint)(labeledgraph, input_36, labels_36, 7853, library_name, base_filename);
                        auto computation_end_time_36 = std::chrono::high_resolution_clock::now();
                        auto computation_duration_36 = std::chrono::duration_cast<std::chrono::seconds>(computation_end_time_36 - computation_time_36);
                        std::cout << "One sector computation completed in T_36 in " << computation_duration_36.count() << " seconds\n";
/******************************************************************************************************************************************* */
                        std::string size_of_one_sector = RESOLVE_INTERFACE_FUNCTION(singular_size_OneSectorComputation_gpi)(one_sector_36, library_name, base_filename);

                        tail_36 = RESOLVE_INTERFACE_FUNCTION(singular_gettail_gpi)(one_sector_36, library_name, base_filename);
                        std::cout << "T_36 completed\n";
                    ]]></code>
                </module>
            </defun>
            <connect-in port="control_36" place="control_36"/>
            <connect-read port="labeledgraph" place="labeledgraph"/>
            <connect-read port="library_name" place="library_name"/>
            <connect-read port="base_filename" place="base_filename"/>
            <connect-read port="input" place="input"/>
            <connect-read port="web" place="web"/>
            <connect-read port="tail_00" place="tail_00"/>
            <connect-read port="tail_23" place="tail_23"/>
            <connect-read port="tail_24" place="tail_24"/>
            <connect-out port="tail_36" place="tail_36"/>
        </transition>

        <transition name="T_41">
            <defun>
                <require key="worker" mandatory="true"/>

                <in name="control_41" type="control"/>
                <in name="labeledgraph" type="string"/>
                <in name="library_name" type="string"/>
                <in name="base_filename" type="string"/>
                <in name="input" type="string"/>
                <in name="web" type="string"/>
                <in name="tail_00" type="string"/>
                <in name="tail_31" type="string"/>
                <in name="tail_32" type="string"/>
                <in name="tail_33" type="string"/>
                <out name="tail_41" type="string"/>
                <module name="singular_template" require_function_unloads_without_rest="false" function="f_T_41(control_41, labeledgraph, library_name, base_filename, input, web, tail_00, tail_31, tail_32, tail_33, tail_41)">
                    <cinclude href="interface/template_interface.hpp"/>
                    <cinclude href="util-generic/dynamic_linking.hpp"/>
                    <code><![CDATA[
                        std::cout << "Starting T_41...\n";

                        std::vector<std::pair<int, int>> jk_pairs = {{0, 0}, {3, 1}, {3, 2}, {3, 3}};
                        std::map<std::pair<int, int>, std::string> tail_jk;
                        tail_jk[{0, 0}] = tail_00;
                        tail_jk[{3, 1}] = tail_31;
                        tail_jk[{3, 2}] = tail_32;
                        tail_jk[{3, 3}] = tail_33;

                        std::string input_41 = RESOLVE_INTERFACE_FUNCTION(singular_makeUserInput_gpi)(tail_00, library_name, base_filename);
                        for (size_t i = 1; i < jk_pairs.size(); i++) {
                            auto [j, k] = jk_pairs[i];
                            std::string tail = tail_jk[{j, k}];
                            input_41 = RESOLVE_INTERFACE_FUNCTION(singular_append_list_gpi)(input_41, tail, library_name, base_filename);
                        }

                        std::string labels_41 = RESOLVE_INTERFACE_FUNCTION(singular_getlabels_gpi)(web, 4, 1, library_name, base_filename);
                        std::cout << "labels_41:" << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(labels_41, library_name) << std::endl;
/******************************************************************************************************************************************* */
                        std::cout << "Starting one sector computation in T_41\n";
                        auto computation_time_41 = std::chrono::high_resolution_clock::now();
                        std::string one_sector_41 = RESOLVE_INTERFACE_FUNCTION(singular_computeSector_flint)(labeledgraph, input_41, labels_41, 7853, library_name, base_filename);
                        auto computation_end_time_41 = std::chrono::high_resolution_clock::now();
                        auto computation_duration_41 = std::chrono::duration_cast<std::chrono::seconds>(computation_end_time_41 - computation_time_41);
                        std::cout << "One sector computation completed in T_41 in " << computation_duration_41.count() << " seconds\n";
/******************************************************************************************************************************************* */
                        std::string size_of_one_sector = RESOLVE_INTERFACE_FUNCTION(singular_size_OneSectorComputation_gpi)(one_sector_41, library_name, base_filename);

                        tail_41 = RESOLVE_INTERFACE_FUNCTION(singular_gettail_gpi)(one_sector_41, library_name, base_filename);
                        std::cout << "T_41 completed\n";
                    ]]></code>
                </module>
            </defun>
            <connect-in port="control_41" place="control_41"/>
            <connect-read port="labeledgraph" place="labeledgraph"/>
            <connect-read port="library_name" place="library_name"/>
            <connect-read port="base_filename" place="base_filename"/>
            <connect-read port="input" place="input"/>
            <connect-read port="web" place="web"/>
            <connect-read port="tail_00" place="tail_00"/>
            <connect-read port="tail_31" place="tail_31"/>
            <connect-read port="tail_32" place="tail_32"/>
            <connect-read port="tail_33" place="tail_33"/>
            <connect-out port="tail_41" place="tail_41"/>
        </transition>

        <transition name="T_42">
            <defun>
                <require key="worker" mandatory="true"/>

                <in name="control_42" type="control"/>
                <in name="labeledgraph" type="string"/>
                <in name="library_name" type="string"/>
                <in name="base_filename" type="string"/>
                <in name="input" type="string"/>
                <in name="web" type="string"/>
                <in name="tail_00" type="string"/>
                <in name="tail_31" type="string"/>
                <in name="tail_34" type="string"/>
                <in name="tail_35" type="string"/>
                <out name="tail_42" type="string"/>
                <module name="singular_template" require_function_unloads_without_rest="false" function="f_T_42(control_42, labeledgraph, library_name, base_filename, input, web, tail_00, tail_31, tail_34, tail_35, tail_42)">
                    <cinclude href="interface/template_interface.hpp"/>
                    <cinclude href="util-generic/dynamic_linking.hpp"/>
                    <code><![CDATA[
                        std::cout << "Starting T_42...\n";

                        std::vector<std::pair<int, int>> jk_pairs = {{0, 0}, {3, 1}, {3, 4}, {3, 5}};
                        std::map<std::pair<int, int>, std::string> tail_jk;
                        tail_jk[{0, 0}] = tail_00;
                        tail_jk[{3, 1}] = tail_31;
                        tail_jk[{3, 4}] = tail_34;
                        tail_jk[{3, 5}] = tail_35;

                        std::string input_42 = RESOLVE_INTERFACE_FUNCTION(singular_makeUserInput_gpi)(tail_00, library_name, base_filename);
                        for (size_t i = 1; i < jk_pairs.size(); i++) {
                            auto [j, k] = jk_pairs[i];
                            std::string tail = tail_jk[{j, k}];
                            input_42 = RESOLVE_INTERFACE_FUNCTION(singular_append_list_gpi)(input_42, tail, library_name, base_filename);
                        }

                        std::string labels_42 = RESOLVE_INTERFACE_FUNCTION(singular_getlabels_gpi)(web, 4, 2, library_name, base_filename);
                        std::cout << "labels_42:" << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(labels_42, library_name) << std::endl;
/******************************************************************************************************************************************* */
                        std::cout << "Starting one sector computation in T_42\n";
                        auto computation_time_42 = std::chrono::high_resolution_clock::now();
                        std::string one_sector_42 = RESOLVE_INTERFACE_FUNCTION(singular_computeSector_flint)(labeledgraph, input_42, labels_42, 7853, library_name, base_filename);
                        auto computation_end_time_42 = std::chrono::high_resolution_clock::now();
                        auto computation_duration_42 = std::chrono::duration_cast<std::chrono::seconds>(computation_end_time_42 - computation_time_42);
                        std::cout << "One sector computation completed in T_42 in " << computation_duration_42.count() << " seconds\n";
/******************************************************************************************************************************************* */
                        std::string size_of_one_sector = RESOLVE_INTERFACE_FUNCTION(singular_size_OneSectorComputation_gpi)(one_sector_42, library_name, base_filename);

                        tail_42 = RESOLVE_INTERFACE_FUNCTION(singular_gettail_gpi)(one_sector_42, library_name, base_filename);
                        std::cout << "T_42 completed\n";
                    ]]></code>
                </module>
            </defun>
            <connect-in port="control_42" place="control_42"/>
            <connect-read port="labeledgraph" place="labeledgraph"/>
            <connect-read port="library_name" place="library_name"/>
            <connect-read port="base_filename" place="base_filename"/>
            <connect-read port="input" place="input"/>
            <connect-read port="web" place="web"/>
            <connect-read port="tail_00" place="tail_00"/>
            <connect-read port="tail_31" place="tail_31"/>
            <connect-read port="tail_34" place="tail_34"/>
            <connect-read port="tail_35" place="tail_35"/>
            <connect-out port="tail_42" place="tail_42"/>
        </transition>

        <transition name="T_43">
            <defun>
                <require key="worker" mandatory="true"/>

                <in name="control_43" type="control"/>
                <in name="labeledgraph" type="string"/>
                <in name="library_name" type="string"/>
                <in name="base_filename" type="string"/>
                <in name="input" type="string"/>
                <in name="web" type="string"/>
                <in name="tail_00" type="string"/>
                <in name="tail_32" type="string"/>
                <in name="tail_34" type="string"/>
                <in name="tail_36" type="string"/>
                <out name="tail_43" type="string"/>
                <module name="singular_template" require_function_unloads_without_rest="false" function="f_T_43(control_43, labeledgraph, library_name, base_filename, input, web, tail_00, tail_32, tail_34, tail_36, tail_43)">
                    <cinclude href="interface/template_interface.hpp"/>
                    <cinclude href="util-generic/dynamic_linking.hpp"/>
                    <code><![CDATA[
                        std::cout << "Starting T_43...\n";

                        std::vector<std::pair<int, int>> jk_pairs = {{0, 0}, {3, 2}, {3, 4}, {3, 6}};
                        std::map<std::pair<int, int>, std::string> tail_jk;
                        tail_jk[{0, 0}] = tail_00;
                        tail_jk[{3, 2}] = tail_32;
                        tail_jk[{3, 4}] = tail_34;
                        tail_jk[{3, 6}] = tail_36;

                        std::string input_43 = RESOLVE_INTERFACE_FUNCTION(singular_makeUserInput_gpi)(tail_00, library_name, base_filename);
                        for (size_t i = 1; i < jk_pairs.size(); i++) {
                            auto [j, k] = jk_pairs[i];
                            std::string tail = tail_jk[{j, k}];
                            input_43 = RESOLVE_INTERFACE_FUNCTION(singular_append_list_gpi)(input_43, tail, library_name, base_filename);
                        }

                        std::string labels_43 = RESOLVE_INTERFACE_FUNCTION(singular_getlabels_gpi)(web, 4, 3, library_name, base_filename);
                        std::cout << "labels_43:" << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(labels_43, library_name) << std::endl;
/******************************************************************************************************************************************* */
                        std::cout << "Starting one sector computation in T_43\n";
                        auto computation_time_43 = std::chrono::high_resolution_clock::now();
                        std::string one_sector_43 = RESOLVE_INTERFACE_FUNCTION(singular_computeSector_flint)(labeledgraph, input_43, labels_43, 7853, library_name, base_filename);
                        auto computation_end_time_43 = std::chrono::high_resolution_clock::now();
                        auto computation_duration_43 = std::chrono::duration_cast<std::chrono::seconds>(computation_end_time_43 - computation_time_43);
                        std::cout << "One sector computation completed in T_43 in " << computation_duration_43.count() << " seconds\n";
/******************************************************************************************************************************************* */
                        std::string size_of_one_sector = RESOLVE_INTERFACE_FUNCTION(singular_size_OneSectorComputation_gpi)(one_sector_43, library_name, base_filename);

                        tail_43 = RESOLVE_INTERFACE_FUNCTION(singular_gettail_gpi)(one_sector_43, library_name, base_filename);
                        std::cout << "T_43 completed\n";
                    ]]></code>
                </module>
            </defun>
            <connect-in port="control_43" place="control_43"/>
            <connect-read port="labeledgraph" place="labeledgraph"/>
            <connect-read port="library_name" place="library_name"/>
            <connect-read port="base_filename" place="base_filename"/>
            <connect-read port="input" place="input"/>
            <connect-read port="web" place="web"/>
            <connect-read port="tail_00" place="tail_00"/>
            <connect-read port="tail_32" place="tail_32"/>
            <connect-read port="tail_34" place="tail_34"/>
            <connect-read port="tail_36" place="tail_36"/>
            <connect-out port="tail_43" place="tail_43"/>
        </transition>

        <transition name="T_44">
            <defun>
                <require key="worker" mandatory="true"/>

                <in name="control_44" type="control"/>
                <in name="labeledgraph" type="string"/>
                <in name="library_name" type="string"/>
                <in name="base_filename" type="string"/>
                <in name="input" type="string"/>
                <in name="web" type="string"/>
                <in name="tail_00" type="string"/>
                <in name="tail_33" type="string"/>
                <in name="tail_35" type="string"/>
                <in name="tail_36" type="string"/>
                <out name="tail_44" type="string"/>
                <module name="singular_template" require_function_unloads_without_rest="false" function="f_T_44(control_44, labeledgraph, library_name, base_filename, input, web, tail_00, tail_33, tail_35, tail_36, tail_44)">
                    <cinclude href="interface/template_interface.hpp"/>
                    <cinclude href="util-generic/dynamic_linking.hpp"/>
                    <code><![CDATA[
                        std::cout << "Starting T_44...\n";

                        std::vector<std::pair<int, int>> jk_pairs = {{0, 0}, {3, 3}, {3, 5}, {3, 6}};
                        std::map<std::pair<int, int>, std::string> tail_jk;
                        tail_jk[{0, 0}] = tail_00;
                        tail_jk[{3, 3}] = tail_33;
                        tail_jk[{3, 5}] = tail_35;
                        tail_jk[{3, 6}] = tail_36;

                        std::string input_44 = RESOLVE_INTERFACE_FUNCTION(singular_makeUserInput_gpi)(tail_00, library_name, base_filename);
                        for (size_t i = 1; i < jk_pairs.size(); i++) {
                            auto [j, k] = jk_pairs[i];
                            std::string tail = tail_jk[{j, k}];
                            input_44 = RESOLVE_INTERFACE_FUNCTION(singular_append_list_gpi)(input_44, tail, library_name, base_filename);
                        }

                        std::string labels_44 = RESOLVE_INTERFACE_FUNCTION(singular_getlabels_gpi)(web, 4, 4, library_name, base_filename);
                        std::cout << "labels_44:" << RESOLVE_INTERFACE_FUNCTION(printGpiTokenContent)(labels_44, library_name) << std::endl;
/******************************************************************************************************************************************* */
                        std::cout << "Starting one sector computation in T_44\n";
                        auto computation_time_44 = std::chrono::high_resolution_clock::now();
                        std::string one_sector_44 = RESOLVE_INTERFACE_FUNCTION(singular_computeSector_flint)(labeledgraph, input_44, labels_44, 7853, library_name, base_filename);
                        auto computation_end_time_44 = std::chrono::high_resolution_clock::now();
                        auto computation_duration_44 = std::chrono::duration_cast<std::chrono::seconds>(computation_end_time_44 - computation_time_44);
                        std::cout << "One sector computation completed in T_44 in " << computation_duration_44.count() << " seconds\n";
/******************************************************************************************************************************************* */
                        std::string size_of_one_sector = RESOLVE_INTERFACE_FUNCTION(singular_size_OneSectorComputation_gpi)(one_sector_44, library_name, base_filename);

                        tail_44 = RESOLVE_INTERFACE_FUNCTION(singular_gettail_gpi)(one_sector_44, library_name, base_filename);
                        std::cout << "T_44 completed\n";
                    ]]></code>
                </module>
            </defun>
            <connect-in port="control_44" place="control_44"/>
            <connect-read port="labeledgraph" place="labeledgraph"/>
            <connect-read port="library_name" place="library_name"/>
            <connect-read port="base_filename" place="base_filename"/>
            <connect-read port="input" place="input"/>
            <connect-read port="web" place="web"/>
            <connect-read port="tail_00" place="tail_00"/>
            <connect-read port="tail_33" place="tail_33"/>
            <connect-read port="tail_35" place="tail_35"/>
            <connect-read port="tail_36" place="tail_36"/>
            <connect-out port="tail_44" place="tail_44"/>
        </transition>

        <transition name="T_0">
            <defun>
                <require key="worker" mandatory="true"/>

                <in name="control_T_0" type="control"/>
                <in name="library_name" type="string"/>
                <in name="base_filename" type="string"/>
                <in name="input" type="string"/>
                <out name="labeledgraph" type="string"/>
                <out name="web" type="string"/>
                <out name="tail_00" type="string"/>
                <module name="singular_template" require_function_unloads_without_rest="false" function="f_T_0(control_T_0, library_name, base_filename, input, labeledgraph, web, tail_00)">
                    <cinclude href="interface/template_interface.hpp"/>
                    <cinclude href="util-generic/dynamic_linking.hpp"/>
                    <code><![CDATA[
                        std::cout << "Starting T_0...\n";
                        labeledgraph = RESOLVE_INTERFACE_FUNCTION(singular_getBaikovMatrix_gpi)(input, library_name, base_filename);
                        web = RESOLVE_INTERFACE_FUNCTION(singular_web_gpi)(input, library_name, base_filename);
                        tail_00 = RESOLVE_INTERFACE_FUNCTION(singular_targetInt_gpi)(input, library_name, base_filename);
                        std::cout << "T_0 completed\n";
                    ]]></code>
                </module>
            </defun>
            <connect-in port="control_T_0" place="control_T_0"/>
            <connect-read port="library_name" place="library_name"/>
            <connect-read port="base_filename" place="base_filename"/>
            <connect-read port="input" place="input"/>
            <connect-out port="labeledgraph" place="labeledgraph"/>
            <connect-out port="web" place="web"/>
            <connect-out port="tail_00" place="tail_00"/>
        </transition>

        <transition name="T_end">
            <defun>
                <require key="worker" mandatory="true"/>

                <in name="control_T_end" type="control"/>
                <in name="tail_41" type="string"/>
                <in name="tail_42" type="string"/>
                <in name="tail_43" type="string"/>
                <in name="tail_44" type="string"/>
                <out name="output" type="string"/>
                <module name="singular_template" require_function_unloads_without_rest="false" function="f_T_end(control_T_end, tail_41, tail_42, tail_43, tail_44, output)">
                    <cinclude href="interface/template_interface.hpp"/>
                    <cinclude href="util-generic/dynamic_linking.hpp"/>
                    <code><![CDATA[
                        std::cout << "Starting T_end...\n";
                        output = "";
                        output += tail_41;
                        output += ";";
                        output += tail_42;
                        output += ";";
                        output += tail_43;
                        output += ";";
                        output += tail_44;
                        std::cout << "T_end completed\n";
                    ]]></code>
                </module>
            </defun>
            <connect-in port="control_T_end" place="control_T_end"/>
            <connect-read port="tail_41" place="tail_41"/>
            <connect-read port="tail_42" place="tail_42"/>
            <connect-read port="tail_43" place="tail_43"/>
            <connect-read port="tail_44" place="tail_44"/>
            <connect-out port="output" place="output"/>
        </transition>

    </net>
</defun>
