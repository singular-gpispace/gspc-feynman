def m=read("ssi:r temp/schipp_137122_1722874432463313577");
;
quit;
quit;
;
ring R=0, x, dp;
smatrix s[2][4];
s[2,3]=x;
s;
link l="ssi:w Smatrix.ssi";
l;
write(l,s,"SparseMatrix");
close(l);
read(l);
quit;
;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
;
link l="ssi:r temp/waas_314170_1730377827391274083";
def m=read(l);
m.r_data;
def nr=m.r_data;
setring nr;
m.data[1];
m.data[2];
exit;
;
link l="ssi:r temp/waas_325720_1730383984749788644";
def m=read(l);
m.r_data;
def nr=m.r_data;
setring nr;
 m.data[1];
 m.data[2];
quit;
link l="ssi:r temp/waas_326923_1730384337207629839";
link l="ssi:r temp/waas_326923_1730384337207629839";
def m=read(l);
m.r_data;
def nr=m.r_data;
setring nr;
 m.data[1];
 m.data[2];
quit;
quit;
quit;
quit;
quit;
;
string s = "{{1, 3}, {1, 2}, {1, 2}, {2, 4}, {3, 4}, {3, 4}}";
s;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
;
s;
    string s = "{{1, 3}, {1, 2}, {1, 2}, {2, 4}, {3, 4}, {3, 4}}";
s;
list l=s;
l;
quit;
;
ideal J = w2 - x * z, w* x - y * z, x2 - w * y, x* y - z2, y2 - w * z;
string s = "{{1, 3}, {1, 2}, {1, 2}, {2, 4}, {3, 4}, {3, 4}}";
list l;
l[1] = J;
l[2] = s;
l;
ideal I=l[1];
I;
quit;
;
quit;
quit;
quit;
quit;
quit;
;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
;
cd ~/spack/opt/spack/linux-ubuntu22.04-skylake/gcc-11.3.0/gpi-space-23.06-gxye6b7ngsnbxnzjkfsfqtvanynyghdk/bin && ./gspc-logging-to-stdout.exe --port 9876 > ~/gpi/try_gpi/Reduce/monitor.txt 2>&1
link l="ssi:r tempbonsoir.ssi";
def m=read(l);
m;
link l="ssi:r tempbonsoir.ssi";
def m=read(l);
m;
quit;
;
> link l="ssi:r temp/waas_649526_1731144998227642808";
 link l="ssi:r temp/waas_649526_1731144998227642808";
 def m=read(l);
 m.r_data;
def nr=m.r_data;
 setring nr;
 m.data[1];
def nr=m.r_data;
 setring nr;
 m.data[2];
def nr=m.r_data;
 setring nr;
 m.data[3];
quit;
;
 link l="ssi:r temp/waas_650457_1731146497680889120";
 def m=read(l);
 m.r_data;
 def nr=m.r_data;
 setring nr;
 m.data[1];
 m.data[1];
 m.data[2];
 m.data[3];
quit;
quit;
quit;
;
 link l="ssi:r temp/waas_652034_1731146966565628822";
 def m=read(l);
 def nr=m.r_data;
 setring nr;
 m.data[2];
 m.data[3];
 m.data[3];
 m.data[2];
 m.data[1];
 m.data[0];
quit;
;
 link l="ssi:r temp/waas_63925_1731324564947008843";
 def m=read(l);
 def nr=m.r_data;
 setring nr;
 m.data[0];
 m.data[1];
 m.data[3];
quit;
quit;
quit;
quit;
quit;
 link l="ssi:r temp/input";
 link l="ssi:r temp/input";
 def m=read(l);
 def nr=m.r_data;
 setring nr;
 m.data[1];
 m.data[2];
 m.data[3];
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
;
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;!
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
link l="ssi:r temp/tempbonjour.ssi";
 def m=read(l);
link l="ssi:r tempbonjour.ssi";
 def m=read(l);
m;
m;
quit;
quit;
quit;
link l="ssi:r temphello.ssi";
 def m=read(l);
m;
m;
quit;
quit;
quit;
quit;
quit;
link l="ssi:r temphello.ssi";
 def m=read(l);
m;
link l="ssi:r temp/waas_1293822_1734696871369182968";
 def m=read(l);
m;
m.r_data;
 setring nr;
 def nr=m.r_data;
 setring nr;
 m.data[1];
 m.data[2];
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
link l="ssi:r temphello.ssi";
 def m=read(l);
m;
m;
quit;
link l="ssi:r temphello.ssi";
link l="ssi:r temphello.ssi";
 m.data[2];
 def m=read(l);
m;
quit;
quit;
link l="ssi:r temphello.ssi";
 def m=read(l);
m;
m[1][1].sectorMap;
m[1][1].sectorMap;
quit;
quit;
quit;
link l="ssi:r tempgetSector.ssi";
 def m=read(l);
m;
m;
quit;
quit;
quit;
quit;
link l="ssi:r tempfindSector.ssi";
 def m=read(l);
m;
m;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
link l="ssi:r hello.ssi";
 def m=read(l);
 def m1=read(l);
 def m2=read(l);
m;
m1;
m2;
m3;
 def m3=read(l);
m3;
quit;
quit;
link l="ssi:r hello.ssi";
 def m=read(l);
 def m1=read(l);
 def m2=read(l);
 def m3=read(l);
 def m4=read(l);
 def m5=read(l);
m;
m1;
m2;
m3;
m4;
m5;
quit;
link l="ssi:r hello.ssi";
 def m=read(l);
 def m1=read(l);
m;
m1;
quit;
link l="ssi:r hello.ssi";
 def m1=read(l);
m1;
m1;
quit;
link l="ssi:r hello.ssi";
 def m1=read(l);
m1;
quit;
link l="ssi:r hello.ssi";
 def m1=read(l);
 link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
m;
m1;
m;
quit;
 link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
m;
m;
m1;
m2;
m3;
 link l="ssi:r hello.ssi";
def m=read(l);
m;
def m1=read(l);
m1;
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
m;
m1;
m4;
m4;
quit;
 link l="ssi:r hello.ssi";
def m=read(l);
m;
def m1=read(l);
m1;
link l = "ssi:r hello.ssi";  // Open file for reading
list lines;                  // Initialize a list to store all lines
while (!eof(l)) {            // Continue reading until end of file
  lines[size(lines) + 1] = read(l);
}
// Close the link after reading
close(l);
// Access lines using their index
lines[1];  // First line
lines[2];  // Second line
lines[3];  // Third line
// and so on...
link l = "ssi:r hello.ssi";  // Open file for reading
list lines;                  // Initialize a list to store all lines
int success = 1;             // Variable to check if reading was successful
while (success) {
  try {
    lines[size(lines) + 1] = read(l);  // Attempt to read a line
  } catch {                           // Catch errors when no more lines exist
    success = 0;                      // Stop the loop
  }
}
// Close the link after reading
close(l);
// Access lines using their index
lines[1];  // First line
lines[2];  // Second line
lines[3];  // Third line
// and so on...
link l = "ssi:r hello.ssi";  // Open the file for reading
list lines;                  // Initialize a list to store the lines
string line;                 // Variable to temporarily store each line
while (1) {
  line = read(l);            // Try to read a line
  if (line == "") {          // Check if the line is empty (EOF reached)
    break;                   // Exit the loop
  }
  lines[size(lines) + 1] = line;  // Append the line to the list
}
// Close the link after reading
close(l);
// Access the lines
lines[1];  // First line
lines[2];  // Second line
lines[3];  // Third line
// ...and so on
link l = "ssi:r hello.ssi"; // Open the file for reading
list lines;                 // Initialize a list to store the lines
string line;                // Temporary variable to hold each line
int i = 1;                  // Counter for indexing the lines
// Read the file line by line until EOF
while (1) {
  if (defined(l)) {          // Check if the link is valid
    line = read(l);          // Read a line
    if (line == "") {        // If an empty string, EOF reached
      break;                 // Exit the loop
    }
    lines[i] = line;         // Store the line in the list
    i++;                     // Increment the counter
  } else {
    break;                   // Exit if the link becomes undefined
  }
}
// Close the link after reading
close(l);
// Access the lines
write("Total lines read: ", size(lines), "\n");
for (i = 1; i <= size(lines); i++) {
  write("Line ", i, ": ", lines[i], "\n");
}
link l = "ssi:r hello.ssi"; // Open the file for reading
list expressions;           // List to store the expressions
int i = 1;                  // Counter for indexing
// Read all expressions until EOF
while (status(l)) {         // Check if there's data to read
  expressions[i] = read(l); // Read one expression and store it
  i++;                      // Increment the counter
}
// Close the link after reading
close(l);
// Print all expressions
write("Total expressions read: ", size(expressions), "\n");
for (i = 1; i <= size(expressions); i++) {
  write("Expression ", i, ": ", expressions[i], "\n");
}
link l = "ssi:r hello.ssi"; // Open the file for reading
list expressions;           // List to store the expressions
int i = 1;                  // Counter for indexing
// Check the link's status and read all expressions
while (status(l) != 0) {    // Ensure there is data to read
  expressions[i] = read(l); // Read one expression and store it
  i++;                      // Increment the counter
}
// Close the link after reading
close(l);
// Print all expressions
write("Total expressions read: ", size(expressions), "\n");
for (i = 1; i <= size(expressions); i++) {
  write("Expression ", i, ": ", expressions[i], "\n");
}
link l = "ssi:r hello.ssi"; // Open the file for reading
list expressions;           // List to store the expressions
int i = 1;                  // Counter for indexing
// Check the link's status and read all expressions
while (status(l)) {         // Loop while there is data to read
  expressions[i] = read(l); // Read one expression and store it
  i++;                      // Increment the counter
}
// Close the link after reading
close(l);
// Print all expressions
write("Total expressions read: ", size(expressions), "\n");
for (i = 1; i <= size(expressions); i++) {
  write("Expression ", i, ": ", expressions[i], "\n");
}
quit;
 link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
m;
m1;
quit;
 link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
m;
m1;
m2;
m3;
m4;
m5;
link l = "ssi:r hello.ssi";  // Open the file for reading
list file_content;
while (!eof(l)) {
  file_content = file_content, read(l);  // Append each line to the list
}
close(l);  // Close the file
// Access the content by indices
file_content[1];  // Starting removeElimVars procedure.
file_content[2];  // Number of elimvars:
file_content[3];  // 6
file_content[4];  // Labels:
file_content[5];  // [1]: q(1)
file_content[6];  // [2]: q(2)
link l = "ssi:r hello.ssi";  // Open the file for reading
list file_content;           // List to store all lines
string line;                 // Temporary variable to store each line
while (1) {                  // Infinite loop to keep reading
  try {
    line = read(l);          // Attempt to read a line
    file_content = file_content, line;  // Append to the list
  } catch {                  // If an error occurs (e.g., end of file)
    break;                   // Exit the loop
  }
}
close(l);  // Close the file
// Access the content by indices
file_content[1];  // Starting removeElimVars procedure.
file_content[2];  // Number of elimvars:
file_content[3];  // 6
file_content[4];  // Labels:
file_content[5];  // [1]: q(1)
file_content[6];  // [2]: q(2)
quit;
 link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
m7;
m6;
m5;
quit;
 link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l):
;
def m6=read(l);
m6;
quit;
 link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
m;
m2;
m4;
m5;
m6;
quit;
 link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
m5;
m4;
m6;
m4;
m5;
quit;
  write(l, "Updated Graph:\n", G1);
 link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
m4;
m5;
m6;
m3;
quit;
 link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
m5;
m4;
m6;
m5;
quit;
 link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
m5;
m6;
quit;
 link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
m5;
m6;
quit;
 link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
m6;
m7;
quit;
 link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
m5;
m6;
m7;
quit;
 link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
m5;
m6;
m7;
quit;
 link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
m5;
m6;
m7;
quit;
 link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
m5;
m6;
m7;
quit;
 link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
m5;
m6;
m4;
quit;
 link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m5;
m6;
m7;
m8;
quit;
 link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m5;
m6;
m7;
m8;
quit;
 link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m5;
m3;
m4;
m6;
C95;
m5;
quit;
 link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m4;
m5;
m6;
m7;
m8;
quit;
 link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m5;
m6;
m7;
quit;
 link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m5;
m6;
m7;
m8;
quit;
 link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m5;
m6;
m7;
quit;
 link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m6;
m7;
m8;
quit;
 link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m5;
m4;
m5;
m6;
m7;
quit;
 link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m5;
m6;
m7;
m8;
quit;
 link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m6;
m7;
m8;
quit;
 link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m5;
m4;
m5;
m6;
m7;
m8;
quit;
 link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m5;
m4;
m6;
m7;
m8;
quit;
 link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m5;
m6;
m7;
m8;
quit;
 link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m5;
m6;
m7;
quit;
 link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
quit;
quit;
quit;
quit;
link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m1;
m2;
quit;
link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m1;
m2;
m3;
m4;
quit;
quit;
quit;
quit;
link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m1;
m2;
m;
quit;
link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m1;
m2;
m3;
m4;
quit;
link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m5;
m4;
quit;
quit;
link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m4;
m5;
m6;
m7;
m8;
m8;
quit;
link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m5;
m4;
m6;
quit;
quit;
quit;
quit;
quit;
link l="ssi:r temp/waas_1293822_1734696871369182968";
quit;
link l="ssi:r temp/waas_1990514_1735033174858440727";
 def m=read(l);
 m.r_data;
 def nr=m.r_data;
 setring nr;
 m.data[1];
 m.data[2];
 m.data[3];
 m.data[4];
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
link l="ssi:r temp/waas_1990514_1735033174858440727";
link l="ssi:r temp/waas_2006852_1735038019081428306";
 def m=read(l);
 m.r_data;
 def nr=m.r_data;
 setring nr;
 m.data[1];
m.data[2];
quit;
quit;
quit;
quit;
link l="ssi:r temp/waas_2006852_1735038019081428306";
link l="ssi:r temp/waas_2011967_1735039220841016463";
 def m=read(l);
 m.r_data;
 def nr=m.r_data;
 setring nr;
 m.data[1];
quit;
quit;
link l="ssi:r temp/waas_2011967_1735039220841016463";
link l="ssi:r temp/waas_2013242_1735039403265454080";
 def m=read(l);
 m.r_data;
 def nr=m.r_data;
 setring nr;
 m.data[1];
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
link l="ssi:r temp/waas_3900306_1736242366253193410";
 def m=read(l);
 def nr=m.r_data;
 setring nr;
 m.data[1];
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
link l="ssi:r hello.ssi";
def m=read(l);
m;
def m=read(l);
def m=read(l);
m;
m;
link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
m;
m1;
m2;
link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
m;
m1;
m2;
m3;
m4;
quit;
link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
m;
m1;
quit;
link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
m;
m1;
m2;
m3;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m1;
 link l="ssi:r temp/waas_3976595_1736264525547869963";
 def m=read(l);
 m.r_data;
 def nr=m.r_data;
 setring nr;
 m.data[1];
graph G = makeGraph(list(1,2,3,4,5,6),list(list(6,1),list(4,6),list(1,2),list(3,5),list(4,3),list(2,5),list(5,6),list(1),list(2),list(3),list(4)));
  labeledgraph G1 = computeBaikovMatrix(G);
exit;
exit;
exit;
exit;
exit;
link l="ssi:r hi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m1;
m2;
m3;
m4;
m5;
m6;
m7;
m8;
exit;
link l="ssi:r hi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m1;
m2;
exit;
link l="ssi:r hi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m1;
quit;
link l="ssi:r hi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m1;
quit;
link l="ssi:r hi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m1;
def s=m1.baikovover;
setring s;
m1.baikovmatrix;
s;
def s=m1.baikovmatrix_r;
def s=m1.baikovmatrix_r.data;
def s=m1.baikovmatrix.r_data;
m1;
quit;
quit;
link l="ssi:r hi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m1;
m1.baikovmatrix;
m1.baikovmatrix_r;
m1.r_baikovmatrix;
def s=m1.r_baikovmatrix;
setring s;
m1.baikovmatrix;
m1;
link l="ssi:r hi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m1;
quit;
computeManyIBPcomputeManyIBP
quit;
link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
quit;
link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
quit;
quit;
quit;
quit;
quit;
link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
 def RB = m.r_baikovmatrix;
  setring RB;
m.baikovmatrix;
quit;
link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m1;
quit;
quit;
link l="ssi:r hi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m1;
m2;
quit;
link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m1;
m;
m2;
m3;
quit;
link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m1;
m2;
m3;
quit;
link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m1;
m2;
m;
quit;
link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m1;
m;
quit;
link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m2;
m3;
quit;
quit;
quit;
quit;
link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
quit;
quit;
quit;
quit;
link l="ssi:r hi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m1;
m2;
list l;
list mm;
int mm;
setIBP S;
quit;
quit;
link l="ssi:r temp/waas_258021_1736525268693007812";
def m=read(l);
 m.r_data;
 def nr=m.r_data;
 setring nr;
 m.data[1];
m.data[2];
quit;
quit;
quit;
link l="ssi:r temp/waas_258021_1736525268693007812";
link l="ssi:r temp/waas_260312_1736525758067053576";
 def m=read(l);
 m.r_data;
 def nr=m.r_data;
 setring nr;
 m.data[1];
quit;
link l="ssi:r temp/waas_260312_1736525758067053576";
link l="ssi:r temp/waas_261916_1736526165575976285";
 def m=read(l);
 m.r_data;
 def nr=m.r_data;
 setring nr;
 m.data[1];
quit;
link l="ssi:r temp/waas_261916_1736526165575976285";
link l="ssi:r temp/waas_262891_1736526444519998327";
 def m=read(l);
 m.r_data;
 def nr=m.r_data;
 setring nr;
 m.data[1];
quit;
link l="ssi:r temp/waas_262891_1736526444519998327";
link l="ssi:r temp/waas_263684_1736526648403355439";
 def m=read(l);
 m.r_data;
 def nr=m.r_data;
 setring nr;
 m.data[1];
quit;
link l="ssi:r temp/waas_263684_1736526648403355439";
link l="ssi:r temp/waas_265765_1736527452857520011";
 def m=read(l);
 m.r_data;
 def nr=m.r_data;
 setring nr;
 m.data[1];
quit;
quit;
quit;
link l="ssi:r hi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m1;
quit;
link l="ssi:r hi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
quit;
quit;
link l="ssi:r hi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m1;
m2;
quit;
link l="ssi:r hi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
quit;
link l="ssi:r hi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m.seed;
m.IBP;
 link l="ssi:r temp/waas_314170_1730377827391274083";
 link l="ssi:r temp/waas_271877_1736528865321165872";
 def m=read(l);
 m.r_data;
 def nr=m.r_data;
 setring nr;
 m.data[1];
 link l="ssi:r temp/waas_271877_1736528865320373404";
 def m=read(l);
 m.r_data;
 def nr=m.r_data;
 setring nr;
 m.data[1];
m.seed;
m.data[1].seed;
m.data[1].over;
link l="ssi:r hi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m.over;
 def m=read(l);
 m.r_data;
 def nr=m.r_data;
 setring nr;
 m.data[1];
;
link l="ssi:r temp/waas_263684_1736526648403355439";
link l="ssi:r temp/waas_271877_1736528865320708900";
 def m=read(l);
 m.r_data;
 def nr=m.r_data;
 setring nr;
 m.data[1];
m.data[1];
m.data[1].seed;
link l="ssi:r temp/waas_271877_1736528865320872061";
 def m=read(l);
 m.r_data;
 def nr=m.r_data;
 setring nr;
 m.data[1];
link l="ssi:r temp/waas_271877_1736528865321165872";
 def m=read(l);
 m.r_data;
 def nr=m.r_data;
 setring nr;
 m.data[1];
link l="ssi:r hi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
quit;
quit;
quit;
link l="ssi:r hi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
quit;
link l="ssi:r hi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m1;
m2;
m3;
quit;
 link l="ssi:r temp/waas_376540_1736588637228426587";
 def m=read(l);
 m.r_data;
 def nr=m.r_data;
 setring nr;
 m.data[1];
ring R;
ring HHH;
HHH;
quit;
quit;
link l="ssi:r hi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m1;
m.seed;
link l="ssi:r hi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m1;
m2;
m.seed;
m2.seed;
quit;
link l="ssi:r hi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
quit;
link l="ssi:r hi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
link l="ssi:r hi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
quit;
quit;
quit;
quit;
link l="ssi:r hi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m1;
quit;
link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m1;
quit;
quit;
quit;
quit;
quit;
quit;
link l="ssi:r temp/waas_465500_1736766377946934255";
 def m=read(l);
 m.r_data;
 def nr=m.r_data;
 setring nr;
 m.data[1];
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
link l="ssi:r hi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m1;
quit;
quit;
quit;
link l="ssi:r temp/waas_486897_1736773063293592903";
 def m=read(l);
 m.r_data;
 def nr=m.r_data;
 setring nr;
 m.data[1];
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;*
quit;*
quit;*
quit;*
quit;*
quit;*
quit;*
quit;*
quit;*
quit;*
quit;*
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;*
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
link l="ssi:r temp/waas_486897_1736773063293592903";
link l="ssi:r temp/waas_1134780_1737195164419157076";
 def m=read(l);
 m.r_data;
 def nr=m.r_data;
 setring nr;
 m.data[1];
m.data[1].targetIints;
m.data[1].targetInts;
m.data[1]. targetInts;
m.data[1];
m.data[1].targetInts;
m.data[1][1].targetInts;
link l="ssi:r temp/waas_1134780_1737195164419313089";
 def m=read(l);
 m.r_data;
 def nr=m.r_data;
 setring nr;
 m.data[1];
m.data[1][1].targetInts;
quit;
quit;
quit;
quit;
link l="ssi:r temp/waas_1134780_1737195164419313089";
link l="ssi:r temp/waas_1140466_1737196384914579046";
 def m=read(l);
 m.r_data;
 def nr=m.r_data;
 setring nr;
 m.data[1];
m.data[1][1].targetInts;
quit;
link l="ssi:r hi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m1;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
quit;
link l="ssi:r hi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m[3][1].targetInts;
m[3][2].targetInts;
m[2][2].targetInts;
m[2][1].targetInts;
m2;
quit;
link l="ssi:r hi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m1;
m2;
m3;
m4;
quit;
link l="ssi:r hi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m2;
m4;
m5;
m6;
m7;
quit;
link l="ssi:r hi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m4;
m5;
m6;
m7;
m7;
quit;
link l="ssi:r hi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m4;
m5;
m6;
m7;
quit;
;
link l="ssi:r hi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
;
link l="ssi:r hi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
quit;
quit;
s
s
quit;
quit;
;
int j=1;
link l="ssi:r hi.ssi";
;
int j=1;
j;
l=1;
link l="ssi:r hi.ssi";
ring r=0,(a,b,c,u,v,w,x,y,z),lp;
ideal i=a+c+v+2x-1, ab+cu+2vw+2xy+2xz-2/3,  ab2+cu2+2vw2+2xy2+2xz2-2/5,
ab3+cu3+2vw3+2xy3+2xz3-2/7, ab4+cu4+2vw4+2xy4+2xz4-2/9, vw2+2xyz-1/9,
vw4+2xy2z2-1/25, vw3+xyz2+xy2z-1/15, vw4+xyz3+xy3z-1/21;
link l_hilb,l_fglm = "ssi:fork","ssi:fork";  
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
link l="ssi:r hallo.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m1;
m2;
$
$
$
$
$
link l="ssi:r hallo.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m1;
m2;
m3;
m4;
m5;
$
$
link l="ssi:r hallo.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m1;
m3;
m4;
$
link l="ssi:r hallo.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m4;
$
link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
$
link l="ssi:r hello.ssi";
link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m1;
m2;
$
link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m1;
m2;
$
$
$
$
$
$
$
link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m2;
m4;
m5;
m4;
m6;
$
link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m6;
$
$
link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m6;
m5;
m4;
$
$
link l="ssi:r hello.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m1;
m2;
m4;
$
$
$
$
$
$
$
$
$
$
$
$
$
link l="ssi:r hi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m1;
m2;
m3;
m4;
m4;
$
link l="ssi:r hi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m3;
m4;
m5;
$
$
$
$
$
$
$
$
link l="ssi:r hi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m2;
m3;
m4;
m5;
m6;
m7;
$
link l="ssi:r hi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m5;
m6;
m7;
m8;
m4;
m3;
$
link l="ssi:r hi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m5;
m6;
m7;
m8;
m4;
m5;
m3;
m2;
m7;
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
link l="ssi:r hallo.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m1;
m2;
$
link l="ssi:r hallo.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m2;
m3;
$
link l="ssi:r hallo.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m4;
m3;
m2;
$
link l="ssi:r hi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m1;
link l="ssi:r hallo.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
$
$
$
$
$
$
$
$
$
$
$
$
$
$
link l="ssi:r hallo.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m1;
m2;
m4;
m5;
m6;
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
proc testProc()
{
    int x = 5;
    print("x before:", x);
    x = x + 2;
    print("x after:", x);
}
testProc();
0
$
kstd(x);
kStd(x);
$
$
$
$
$
$
$
$
$
$
$
$
$
$
"example.sing";
<"example.sing";
run
;
$
$
$
$
$
bt
;
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
   ssh -X your_server
^
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
link l="ssi:r hallo.ssi";
def m=read(l);
m;
link l="ssi:r getreducedibps.ssi";
def m=read(l);
m;
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m1;
link l="ssi:r getreducedibps.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m1;
m2;
m.data;
m.data[1];
m.data[3];
m.data[1];
m.data[1].IBP;
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
link l="ssi:r computeBaikovMatrix_gpi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
link l="ssi:r computebaikovmatrix.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m1;
m2;
m3;
m4;
m6;
m7;
m8;
$
link l="ssi:r computebaikovmatrix.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m2;
m3;
m4;
m5;
m6;
m7;
m8;
$
$
$
$
$
link l="ssi:r hi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m1;
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
cd build_dir && make clean && cd .. && ./install.sh
cd build_dir && make clean
./install.sh
./run.sh
cd build_dir && make clean && cd .. && ./install.sh
./run.sh
cd build_dir && make clean && cd .. && ./install.sh
./run.sh
cd build_dir && make clean && cd .. && ./install.sh
./run.sh
$
$
$
$
$
$
$
$
$^
$
$
$
$
$
$
$
link l="ssi:r hi.ssi";
link l="ssi:r getlabels.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m1;
m2;
m.fieldnames;
m.fieldnames[1];
m.fieldnames[1][1];
m.fieldnames[1][1][1];
$
link l="ssi:r getlabels.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m1;
m2;
m3;
m4;
link l="ssi:r getlabels.ssi";
link l="ssi:r getlabels_gpi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m1;
m2;
m3;
m2.$
$
$
$
$
$
$
link l="ssi:r getlabels_gpi.ssi";
link l="ssi:r onesectorcomputation_gpi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m2;
m4;
m5;
m6;
$
$
$
$
$
$
$
$
link l="ssi:r onesectorcomputation_gpi.ssi";
;
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m2;
m3;
m4;
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
link l="ssi:r onesectorcomputation_gpi.ssi";
link l="ssi:r return_list.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m1;
m2;
m3;
$
$
$
link l="ssi:r return_list.ssi";
$
link l="ssi:r return_list.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m1;
m2;
m3;
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
link l="ssi:r hallo.ssi";
link l="ssi:r append_list_gpi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m1;
m2;
m3;
m4;
m4.data;
$
$
$
$
link l="ssi:r append_list_gpi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m1;
m;
m.data;
m1.data;
m1.data;$
link l="ssi:r append_list_gpi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m2;
m3;
m1;
m1.data;
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
link l="ssi:r append_list_gpi.ssi";
link l="ssi:r size_OneSectorComputation_gpi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m1;
m2;
m3;
m4;
m5;
$
link l="ssi:r size_OneSectorComputation_gpi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m.data;
string(m.data);
string(m.data[1]);
string(m.data[2]);
string(m.data[1]);
string(m.data[1].seed);
string(m.data[1].IBP);
string(size(m.data[1].IBP));
$
$
$
$
$
$
$
link l="ssi:r size_OneSectorComputation_gpi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
link l="ssi:r size_OneSectorComputation_gpi.ssi";
link l="ssi:r OneSectorComputation_gpi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m1;
m2;
m3;
m4;
m5;
m6;
m7;
$
$
$
link l="ssi:r OneSectorComputation_gpi.ssi";
link l="ssi:r OneSectorComputation.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m1;
m2;
$
$
$
$
$
$
LIB "templategp.lib";
proc getRedIBP(setIBP S,int p)
"USAGE:   getRedIBPs(S,p); 
ASSUME:   S is setIBP, and p is a prime number. 
RETURN:   list L, L[1]=indIBP, L[2]=seed where,
          indIBP contain the linearly independent IBP relations of setIBP which are obtained by finite field row reduction over the field Fp. 
          seed contain the indeces correspond to the non-free columns in rref.
KEYWORDS: feynman graph,IBPs
EXAMPLE:  getRedIBPs; shows an example
"
{
  list prep = prepareRedIBPs(S, p);
  matrix N = prep[1];
  list ind = prep[2];
  ring R = prep[3];
  
  list Z = performGaussRed(N);
  list indIBP = processRedIBPs(Z, S);
  
  return(list(indIBP, Z[2]));
}
 graph G = makeGraph(list(1,2,3,4,5,6),list(list(6,1),list(4,6),list(1,2),list(3,5),list(4,3),list(2,5),list(5,6),list(1),list(2),list(3),list(4)));
  labeledgraph G1=computeBaikovMatrix(G);
  setIBP S=computeIBP(G1,list(1,1,0,1,0,1,0,1,0));
  ring R=S.over;
  setring R;
 list L=getRedIBP(S,101);
  size(L[1])<size(S.IBP);
L;
$
LIB "templategp.lib";
 graph G = makeGraph(list(1,2,3,4,5,6),list(list(6,1),list(4,6),list(1,2),list(3,5),list(4,3),list(2,5),list(5,6),list(1),list(2),list(3),list(4)));
  labeledgraph G1=computeBaikovMatrix(G);
  setIBP S=computeIBP(G1,list(1,1,0,1,0,1,0,1,0));
  ring R=S.over;
  setring R;
  list L=getRedIBP(S,101);
proc getRedIBP(setIBP S,int p)
"USAGE:   getRedIBP(S,p); 
ASSUME:   S is setIBP, and p is a prime number. 
RETURN:   list L, L[1]=indIBP, L[2]=seed where,
          indIBP contain the linearly independent IBP relations of setIBP which are obtained by finite field row reduction over the field Fp. 
          seed contain the indeces correspond to the non-free columns in rref.
KEYWORDS: feynman graph,IBPs
EXAMPLE:  getRedIBP; shows an example
"
{
  ring R = S.over;
  list prep = prepareRedIBPs(S, p);
  print("prep"+string(prep)); 
  matrix N = prep[1];
  list ind = prep[2];
  
  list Z = performGaussRed(N, p);
  list indIBP = processRedIBPs(Z, S);
  
  //identify non-zero columns
  list seed;
  int l=1;
  for(int k=1;k <= ncols(Z[3]);k++){
    for(int j=1;j <= nrows(Z[3]);j++){
      if(Z[3][j,k] != 0){
        seed[l]=ind[k][1];
        l++;
        break;
      }
    }
  }
  
  return(list(indIBP,seed));
}
  list L=getRedIBP(S,101);
$
LIB "templategp.lib";
graph G = makeGraph(list(1,2,3,4,5,6),list(list(6,1),list(4,6),list(1,2),list(3,5),list(4,3),list(2,5),list(5,6),list(1),list(2),list(3),list(4)));
  labeledgraph G1=computeBaikovMatrix(G);
  setIBP S=computeIBP(G1,list(1,1,0,1,0,1,0,1,0));
  ring R=S.over;
  setring R;
 list L=getRedIBP(S,101);
proc getRedIBP(setIBP S, int p)
"USAGE:   getRedIBP(S,p); 
ASSUME:   S is setIBP, and p is a prime number. 
RETURN:   list L, L[1]=indIBP, L[2]=seed where,
          indIBP contain the linearly independent IBP relations of setIBP which are obtained by finite field row reduction over the field Fp. 
          seed contain the indeces correspond to the non-free columns in rref.
KEYWORDS: feynman graph,IBPs
"
{
    ring R=S.over;
  list prep=prepareRedIBPs(S,p);
  list prep2=performGaussRed(prep);
  matrix Z=prep2[1];
  list ind=prep2[2];
  list val=prep2[3];
  ring R=prep2[4];
  ring RZ=prep2[5];
  list indIBP;  
  int l=1;
  
   setring R;
  list Z=imap(RZ,Z);
  for(int j=1;j <= Z[4];j++)
  { for(int k=1;k <= ncols(Z[1]);k++)
    {
      if(Z[1][j,k] != 0){
        indIBP[l]=S.IBP[k];
        l++;
      }
    }
  }
  //identify non-zero columns
  list seed;
  int l=1;
  for(int k=1;k <= ncols(Z[3]);k++){
    for(int j=1;j <= nrows(Z[3]);j++){
      if(Z[3][j,k] != 0){
        seed[l]=ind[k][1];
        l++;
        break;
      }
    }
  }
  return(list(indIBP,seed));
}
  list L=getRedIBP(S,101);
proc prepareRedIBPs(setIBP S, int p)
"USAGE:   prepareRedIBPs(S,p); 
ASSUME:   S is setIBP, and p is a prime number. 
RETURN:   list containing:
          - matrix N: the prepared matrix
          - list ind: sorted integrals
KEYWORDS: feynman graph,IBPs
"
{
  
  list ind = getSortedIntegrals(S);
  list val=getRandom(p,npars(R));
  list indIBP;
  int l=1;
  matrix N=setMat(S,val,ind);
  ring RZ=(p,t(1..(npars(R)-1)),D),z(1..nvars(R)),dp;
  matrix N=imap(R,N);
  return(list(N,ind,val,R,RZ));
}
proc performGaussRed(list prep)
"USAGE:   performGaussRed(prep); 
ASSUME:   prep is a list containing [N,ind,val,R,RZ]
RETURN:   list Z containing [rref, pivots, rank, nrows] from gaussred_pivot
KEYWORDS: feynman graph,IBPs
"
{
  matrix N=prep[1];
  list Z=gaussred_pivot(N);
  return(list(Z,prep[2],prep[3],prep[4]));
}
proc getRedIBP(setIBP S, int p)
"USAGE:   getRedIBP(S,p); 
ASSUME:   S is setIBP, and p is a prime number. 
RETURN:   list L, L[1]=indIBP, L[2]=seed where,
          indIBP contain the linearly independent IBP relations of setIBP which are obtained by finite field row reduction over the field Fp. 
          seed contain the indeces correspond to the non-free columns in rref.
KEYWORDS: feynman graph,IBPs
"
{
    ring R=S.over;
  list prep=prepareRedIBPs(S,p);
  list prep2=performGaussRed(prep);
  matrix Z=prep2[1];
  list ind=prep2[2];
  list val=prep2[3];
  ring R=prep2[4];
  ring RZ=prep2[5];
  list indIBP;  
  int l=1;
  
   setring R;
  list Z=imap(RZ,Z);
  for(int j=1;j <= Z[4];j++)
  { for(int k=1;k <= ncols(Z[1]);k++)
    {
      if(Z[1][j,k] != 0){
        indIBP[l]=S.IBP[k];
        l++;
      }
    }
  }
  //identify non-zero columns
  list seed;
  int l=1;
  for(int k=1;k <= ncols(Z[3]);k++){
    for(int j=1;j <= nrows(Z[3]);j++){
      if(Z[3][j,k] != 0){
        seed[l]=ind[k][1];
        l++;
        break;
      }
    }
  }
  return(list(indIBP,seed));
}
example
{ "EXAMPLE:"; echo=2;
  graph G = makeGraph(list(1,2,3,4,5,6),list(list(6,1),list(4,6),list(1,2),list(3,5),list(4,3),list(2,5),list(5,6),list(1),list(2),list(3),list(4)));
  labeledgraph G1=computeBaikovMatrix(G);
  setIBP S=computeIBP(G1,list(1,1,0,1,0,1,0,1,0));
  ring R=S.over;
  setring R;
  list L=getRedIBP(S,101);
  size(L[1])<size(S.IBP);
}
// ... existing code ...
$
LIB "templategp.lib";
 graph G = makeGraph(list(1,2,3,4,5,6),list(list(6,1),list(4,6),list(1,2),list(3,5),list(4,3),list(2,5),list(5,6),list(1),list(2),list(3),list(4)));
  labeledgraph G1=computeBaikovMatrix(G);
  setIBP S=computeIBP(G1,list(1,1,0,1,0,1,0,1,0));
  ring R=S.over;
  setring R;
  list L=getRedIBP(S,101);
proc prepareRedIBPs(setIBP S, int p)
"USAGE:   prepareRedIBPs(S,p); 
ASSUME:   S is setIBP, and p is a prime number. 
RETURN:   list containing:
          - matrix N: the prepared matrix
          - list ind: sorted integrals
KEYWORDS: feynman graph,IBPs
"
{
  
  list ind = getSortedIntegrals(S);
  list val=getRandom(p,npars(R));
  list indIBP;
  int l=1;
  matrix N=setMat(S,val,ind);
  print("size of N: " + string(nrows(N)) + " * " + string(ncols(N)));
  print("R=S.over: " + string(S.over));
  ring RZ=(p,t(1..(npars(R)-1)),D),z(1..nvars(R)),dp;
  print("RZ: " + string(RZ));
  matrix N=imap(R,N);
  print("N: " + string(N));
  return(list(N,ind,val,R,RZ));
}
;
  list L=getRedIBP(S,101);
$
LIB "templategp.lib";
 graph G = makeGraph(list(1,2,3,4,5,6),list(list(6,1),list(4,6),list(1,2),list(3,5),list(4,3),list(2,5),list(5,6),list(1),list(2),list(3),list(4)));
  labeledgraph G1=computeBaikovMatrix(G);
  setIBP S=computeIBP(G1,list(1,1,0,1,0,1,0,1,0));
  ring R=S.over;
  setring R;
  list L=getRedIBP(S,101);
proc prepareRedIBPs(setIBP S, int p)
"USAGE:   prepareRedIBPs(S,p); 
ASSUME:   S is setIBP, and p is a prime number. 
RETURN:   list containing matrix N and sorted indices
KEYWORDS: feynman graph,IBPs
"
{
  def R = S.over;
  setring R;
  
  list ind = getSortedIntegrals(S);
  list val = getRandom(p, npars(R));
  matrix N = setMat(S, val, ind);
  
  return(list(N, ind, val));
}
proc performGaussRed(matrix N, def R, int p) 
"USAGE:   performGaussRed(N, R, p);
ASSUME:   N is matrix in ring R, p is prime
RETURN:   Gauss reduced matrix and ring info
KEYWORDS: feynman graph,IBPs
"
{
  // Create reduction ring
  ring RZ = (p,t(1..(npars(R)-1)),D),z(1..nvars(R)),dp;
  matrix N = imap(R,N);
  list Z = gaussred_pivot(N);
  
  return(Z);
}
proc getRedIBP(setIBP S, int p)
"USAGE:   getRedIBP(S,p); 
ASSUME:   S is setIBP, and p is a prime number. 
RETURN:   list L, L[1]=indIBP, L[2]=seed where,
          indIBP contain the linearly independent IBP relations of setIBP which are obtained by finite field row reduction over the field Fp. 
          seed contain the indeces correspond to the non-free columns in rref.
KEYWORDS: feynman graph,IBPs
"
{
  def R = S.over;
  setring R;
  
  // Prepare matrix and get indices
  list prep = prepareRedIBPs(S, p);
  matrix N = prep[1];
  list ind = prep[2];
  list val = prep[3];
  
  // Perform Gauss reduction
  list Z = performGaussRed(N, R, p);
  
  setring R;
  list Z = imap(RZ,Z);
  
  // Process results
  list indIBP;
  int l = 1;
  for(int j = 1; j <= Z[4]; j++) {
    for(int k = 1; k <= ncols(Z[1]); k++) {
      if(Z[1][j,k] != 0) {
        indIBP[l] = S.IBP[k];
        l++;
      }
    }
  }
  // Identify non-zero columns
  list seed;
  l = 1;
  for(int k = 1; k <= ncols(Z[3]); k++) {
    for(int j = 1; j <= nrows(Z[3]); j++) {
      if(Z[3][j,k] != 0) {
        seed[l] = ind[k][1];
        l++;
        break;
      }
    }
  }
  return(list(indIBP,seed));
}
 graph G = makeGraph(list(1,2,3,4,5,6),list(list(6,1),list(4,6),list(1,2),list(3,5),list(4,3),list(2,5),list(5,6),list(1),list(2),list(3),list(4)));
  labeledgraph G1=computeBaikovMatrix(G);
  setIBP S=computeIBP(G1,list(1,1,0,1,0,1,0,1,0));
  ring R=S.over;
  setring R;
  list L=getRedIBPs(S,101);
L;
size(L[1]);
size(L[2]);
proc prepareRedIBPs(setIBP S, int p)
"USAGE:   prepareRedIBPs(S,p); 
ASSUME:   S is setIBP, and p is a prime number. 
RETURN:   list containing matrix N and sorted indices
KEYWORDS: feynman graph,IBPs
"
{
  def R = S.over;
  setring R;
  
  list ind = getSortedIntegrals(S);
  list val = getRandom(p, npars(R));
  matrix N = setMat(S, val, ind);
  
  return(list(N, ind, val,R));
}
proc performGaussRed(matrix N, def R, int p) 
"USAGE:   performGaussRed(N, R, p);
ASSUME:   N is matrix in ring R, p is prime
RETURN:   Gauss reduced matrix and ring info
KEYWORDS: feynman graph,IBPs
"
{
  // Create reduction ring
  ring RZ = (p,t(1..(npars(R)-1)),D),z(1..nvars(R)),dp;
  matrix N = imap(R,N);
  list Z = gaussred_pivot(N);
  
  return(Z);
}
proc getRedIBP(setIBP S, int p)
"USAGE:   getRedIBP(S,p); 
ASSUME:   S is setIBP, and p is a prime number. 
RETURN:   list L, L[1]=indIBP, L[2]=seed where,
          indIBP contain the linearly independent IBP relations of setIBP which are obtained by finite field row reduction over the field Fp. 
          seed contain the indeces correspond to the non-free columns in rref.
KEYWORDS: feynman graph,IBPs
"
{
  def R = S.over;
  setring R;
  
  // Prepare matrix and get indices
  list prep = prepareRedIBPs(S, p);
  matrix N = prep[1];
  list ind = prep[2];
  list val = prep[3];
  
  // Perform Gauss reduction
  list Z = performGaussRed(N, R, p);
  
  setring R;
  list Z = imap(RZ,Z);
  
  // Process results
  list indIBP;
  int l = 1;
  for(int j = 1; j <= Z[4]; j++) {
    for(int k = 1; k <= ncols(Z[1]); k++) {
      if(Z[1][j,k] != 0) {
        indIBP[l] = S.IBP[k];
        l++;
      }
    }
  }
  // Identify non-zero columns
  list seed;
  l = 1;
  for(int k = 1; k <= ncols(Z[3]); k++) {
    for(int j = 1; j <= nrows(Z[3]); j++) {
      if(Z[3][j,k] != 0) {
        seed[l] = ind[k][1];
        l++;
        break;
      }
    }
  }
  return(list(indIBP,seed));
}
graph G = makeGraph(list(1,2,3,4,5,6),list(list(6,1),list(4,6),list(1,2),list(3,5),list(4,3),list(2,5),list(5,6),list(1),list(2),list(3),list(4)));
  labeledgraph G1=computeBaikovMatrix(G);
  setIBP S=computeIBP(G1,list(1,1,0,1,0,1,0,1,0));
  ring R=S.over;
  setring R;
  list L=getRedIBPs(S,101);
L;
$
LIB "templategp.lib";
graph G = makeGraph(list(1,2,3,4,5,6),list(list(6,1),list(4,6),list(1,2),list(3,5),list(4,3),list(2,5),list(5,6),list(1),list(2),list(3),list(4)));
  labeledgraph G1=computeBaikovMatrix(G);
  setIBP S=computeIBP(G1,list(1,1,0,1,0,1,0,1,0));
  ring R=S.over;
  setring R;
  list L=getRedIBPs(S,101);
size(L[1]);
size(L[2]);
$
LIB "templategp.lib";
 graph G = makeGraph(list(1,2,3,4,5,6),list(list(6,1),list(4,6),list(1,2),list(3,5),list(4,3),list(2,5),list(5,6),list(1),list(2),list(3),list(4)));
  labeledgraph G1=computeBaikovMatrix(G);
  setIBP S=computeIBP(G1,list(1,1,0,1,0,1,0,1,0));
  ring R=S.over;
  setring R;
  list L=getRedIBPs(S,101);
  print("L[1]: " + string(L[1]));
  print("L[2]: " + string(L[2]));
 print("size of L[1]: " + string(size(L[1])));
  print("size of S.IBP: " + string(size(S.IBP)));
 print("size of L[1]: " + string(size(L[1])));
  print("size of L[2]: " + string(size(L[2])));
$
$
$
$
$
$
link l="ssi:r OneSectorComputation_gpi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m1;
m2;
m3;
m4;
m5;
m5;
link l="ssi:r OneSectorComputation_gpi.ssi";
link "ssi:r prepareRedIBPs_gpi.ssi;
;
link "ssi:r prepareRedIBPs_gpi.ssi";
;
;
;
link l= "ssi:r prepareRedIBPs_gpi.ssi";
;
$
link l= "ssi:r prepareRedIBPs_gpi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m.data;
m.data[1];
m.data[2];
m.data[3];
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
link l="ssi:r getlabels_gpi.ssi";
link l="ssi:r computeGetRedIBPs_gpi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m.data;
size(m.data[1]);
$
$
$
link l="ssi:r computeGetRedIBPs_gpi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m1;
m2;
m3;
m4;
m2;
m3;
m2.data[2];
m2.data[3];
$
$
$
link l="ssi:r computeGetRedIBPs_gpi.ssi";
link l="ssi:r computeGetRedIBPs.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
size(m);
$
link l="ssi:r computeGetRedIBPs.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m1;
m2;
m3;
m4;
m5;
m6;
$
$
$
$
link l="ssi:r computeGetRedIBPs_gpi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m1;
m2;
m3;
m4;
m6;
m7;
$
$
link l="ssi:r computeGetRedIBPs_gpi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m3;
m2;
m4;
m6;
$
$
$
link l="ssi:r computeGetRedIBPs_gpi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m.data;
m.data[1];
m.data[1];
 def m=read(l);
 m.r_data;
 def nr=m.r_data;
nr;
m;
$
link l="ssi:r computeGetRedIBPs_gpi.ssi";
 def m=read(l);
m.r_data;
def nr=m.r_data;
setring nr;
m.data[1];
m.data[2];
m.data[3];
m.data[4];
m1;
m2;
$
link l="ssi:r computeGetRedIBPs_gpi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m2;
m1;
m;
m1;
$
$
$
$
link l="ssi:r computeGetRedIBPs_gpi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m1;
m1.data;
$
link l="ssi:r computeGetRedIBPs_gpi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m.data;
 m.r_data;
 def m=read(l);
m;
$
$
link l="ssi:r computeGetRedIBPs_gpi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m5;
m6;
m7;
m8;
m6;
$
link l="ssi:r computeGetRedIBPs_gpi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m5;
m4;
$
$
link l="ssi:r computeGetRedIBPs_gpi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m1;
m4;
m5;
m6;
$
link l="ssi:r computeGetRedIBPs_gpi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m3;
=
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
link l="ssi:r computeGetRedIBPs_gpi.ssi";
link l="ssi:r prepareRedIBPs__gpi.ssi";
link l="ssi:r prepareRedIBPs_gpi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
$
$
$
$
$
link l="ssi:r prepareRedIBPs_gpi.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m1;
string(m);
$
$
$
$
$
$
$
$
$
$
$
link l="ssi:r prepareRedIBPs_gpi.ssi";
link l="ssi:r ComputeOnsSector.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m.data;
m.data[1];
m.data[1].baikovmatrix;
m.data[1].baikovmatrix;$
m.data[1].baikovmatrix;$
$
link l="ssi:r ComputeOnsSector.ssi";
link l="ssi:r ComputeOneSector.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
$
$
$
$
$
$
link l="ssi:r ComputeOneSector.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m2;
m3;
m4;
m5;
m6;
$
link l="ssi:r ComputeOneSector.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m.data;
m.data[1];
m.data[2];
m.data[1][1];
m.data[1][2];
string(m.data[1][1]);
string(m.data[1][2]);
size(m.data[1][2]);
size(m.data[1][1]);
$
$
link l="ssi:r ComputeOneSector.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
size(m);
m[2];
$
link l="ssi:r ComputeOneSector.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
string(m);
string(m1);
string(m2);
string(m3);
string(m4);
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
link l="ssi:r size_computeSector.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
string(m.data);
string(m.data[1]);
string(m.data[1][1]);
string(m.data[1]);$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
:!$
$
$
$
$
$
$
tmux d
tmux d;
tmux detach;
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
link l="ssi:r returnTargetInts.ssi";
def m=read(l);
def m1=read(l);
def m2=read(l);
def m3=read(l);
def m4=read(l);
def m5=read(l);
def m6=read(l);
def m7=read(l);
def m8=read(l);
m;
m1;
m2;
m2.vertices;
m2[1];
m2[2];
m2;
m2.over;
m2.data;
string(m2);
string(m2.edges);
m2.edges;
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
$
