

LIB "templategspc.lib";
//LIB "/home//atraore/gpi/try_gpi/feynman_ibp/template/template/LIB/templategspc.lib";

//LIB "random.lib";
LIB "modstd.lib";
//following from Leadsyz;LIB "general.lib";LIB "monomialideal.lib"; LIB "homolog.lib";


// Configure GPI-Space	
configToken gc = configure_gspc();
gc.options.tmpdir = "/home//atraore/gpi/try_gpi/feynman_ibp/example_dir/temp";
gc.options.nodefile = "nodefile";
gc.options.procspernode = 7;
gc.options.loghost = "waas";
gc.options.logport = 9876;



ring R = 0, x, dp;
//ideal J = 1;  

list v = list(1, 2, 3, 4, 5, 6); // vertices
list e = list(list(6, 1), list(4, 6), list(1, 2), list(3, 5), list(4, 3), list(2, 5), list(5, 6), list(1), list(2), list(3), list(4)); // edges 

list targetInt = list(list(1, 1, 1, -1, -3, 1, -1, -1, -1), list(1, -1, 1, -1, -3, -1, -1, -4, -1));

list L = v, e, targetInt;



// Call gspc_template_mod with proper arguments
int nb_prime; // Specify the number of primes
rtimer = 0;
system("--ticks-per-sec", 1000); // set timer resolution to ms
int t = rtimer;
def re = gspc_template_SchRes(L, gc);
re;

rtimer - t;
print("timer");
